{"ast":null,"code":"import { getInitialResults, waitForResults } from \"instantsearch.js/es/lib/server.js\";\nimport { walkIndex } from \"instantsearch.js/es/lib/utils/index.js\";\nimport React from 'react';\nimport { InstantSearchServerContext, InstantSearchSSRProvider } from \"../index.js\";\n/**\n * Returns the InstantSearch server state from a component.\n */\nexport function getServerState(children, _ref) {\n  var renderToString = _ref.renderToString;\n  var searchRef = {\n    current: undefined\n  };\n  var createNotifyServer = function createNotifyServer() {\n    var hasBeenNotified = false;\n    var notifyServer = function notifyServer(_ref2) {\n      var search = _ref2.search;\n      if (hasBeenNotified) {\n        throw new Error('getServerState should be called with a single InstantSearchSSRProvider and a single InstantSearch component.');\n      }\n      hasBeenNotified = true;\n      searchRef.current = search;\n    };\n    return notifyServer;\n  };\n  return execute({\n    children: children,\n    renderToString: renderToString,\n    searchRef: searchRef,\n    notifyServer: createNotifyServer()\n  }).then(function (serverState) {\n    var shouldRefetch = false;\n\n    // <DynamicWidgets> requires another query to retrieve the dynamic widgets\n    // to render.\n    walkIndex(searchRef.current.mainIndex, function (index) {\n      shouldRefetch = shouldRefetch || index.getWidgets().some(function (widget) {\n        return widget.$$type === 'ais.dynamicWidgets';\n      });\n    });\n    if (shouldRefetch) {\n      return execute({\n        children: /*#__PURE__*/React.createElement(InstantSearchSSRProvider, serverState, children),\n        renderToString: renderToString,\n        searchRef: searchRef,\n        notifyServer: createNotifyServer()\n      });\n    }\n    return serverState;\n  });\n}\nfunction execute(_ref3) {\n  var children = _ref3.children,\n    renderToString = _ref3.renderToString,\n    notifyServer = _ref3.notifyServer,\n    searchRef = _ref3.searchRef;\n  return Promise.resolve().then(function () {\n    renderToString( /*#__PURE__*/React.createElement(InstantSearchServerContext.Provider, {\n      value: {\n        notifyServer: notifyServer\n      }\n    }, children));\n  }).then(function () {\n    return (\n      // We wait for the component to mount so that `notifyServer()` is called.\n      new Promise(function (resolve) {\n        return setTimeout(resolve, 0);\n      })\n    );\n  }).then(function () {\n    // If `notifyServer()` is not called by then, it means that <InstantSearch>\n    // wasn't within the `children`.\n    // We decide to go with a strict behavior in that case; throwing. If users have\n    // some routes that don't mount the <InstantSearch> component, they would need\n    // to try/catch the `getServerState()` call.\n    // If this behavior turns out to be too strict for many users, we can decide\n    // to warn instead of throwing.\n    if (!searchRef.current) {\n      throw new Error(\"Unable to retrieve InstantSearch's server state in `getServerState()`. Did you mount the <InstantSearch> component?\");\n    }\n    return waitForResults(searchRef.current);\n  }).then(function () {\n    return {\n      initialResults: getInitialResults(searchRef.current.mainIndex)\n    };\n  });\n}","map":{"version":3,"names":["getInitialResults","waitForResults","walkIndex","React","InstantSearchServerContext","InstantSearchSSRProvider","getServerState","children","_ref","renderToString","searchRef","current","undefined","createNotifyServer","hasBeenNotified","notifyServer","_ref2","search","Error","execute","then","serverState","shouldRefetch","mainIndex","index","getWidgets","some","widget","$$type","createElement","_ref3","Promise","resolve","Provider","value","setTimeout","initialResults"],"sources":["C:/Users/Samue/OneDrive/Documents/University/Year 3/Computing Project/Code/RevisionWebApp/re-vision/node_modules/react-instantsearch-core/dist/es/server/getServerState.js"],"sourcesContent":["import { getInitialResults, waitForResults } from \"instantsearch.js/es/lib/server.js\";\nimport { walkIndex } from \"instantsearch.js/es/lib/utils/index.js\";\nimport React from 'react';\nimport { InstantSearchServerContext, InstantSearchSSRProvider } from \"../index.js\";\n/**\n * Returns the InstantSearch server state from a component.\n */\nexport function getServerState(children, _ref) {\n  var renderToString = _ref.renderToString;\n  var searchRef = {\n    current: undefined\n  };\n  var createNotifyServer = function createNotifyServer() {\n    var hasBeenNotified = false;\n    var notifyServer = function notifyServer(_ref2) {\n      var search = _ref2.search;\n      if (hasBeenNotified) {\n        throw new Error('getServerState should be called with a single InstantSearchSSRProvider and a single InstantSearch component.');\n      }\n      hasBeenNotified = true;\n      searchRef.current = search;\n    };\n    return notifyServer;\n  };\n  return execute({\n    children: children,\n    renderToString: renderToString,\n    searchRef: searchRef,\n    notifyServer: createNotifyServer()\n  }).then(function (serverState) {\n    var shouldRefetch = false;\n\n    // <DynamicWidgets> requires another query to retrieve the dynamic widgets\n    // to render.\n    walkIndex(searchRef.current.mainIndex, function (index) {\n      shouldRefetch = shouldRefetch || index.getWidgets().some(function (widget) {\n        return widget.$$type === 'ais.dynamicWidgets';\n      });\n    });\n    if (shouldRefetch) {\n      return execute({\n        children: /*#__PURE__*/React.createElement(InstantSearchSSRProvider, serverState, children),\n        renderToString: renderToString,\n        searchRef: searchRef,\n        notifyServer: createNotifyServer()\n      });\n    }\n    return serverState;\n  });\n}\nfunction execute(_ref3) {\n  var children = _ref3.children,\n    renderToString = _ref3.renderToString,\n    notifyServer = _ref3.notifyServer,\n    searchRef = _ref3.searchRef;\n  return Promise.resolve().then(function () {\n    renderToString( /*#__PURE__*/React.createElement(InstantSearchServerContext.Provider, {\n      value: {\n        notifyServer: notifyServer\n      }\n    }, children));\n  }).then(function () {\n    return (\n      // We wait for the component to mount so that `notifyServer()` is called.\n      new Promise(function (resolve) {\n        return setTimeout(resolve, 0);\n      })\n    );\n  }).then(function () {\n    // If `notifyServer()` is not called by then, it means that <InstantSearch>\n    // wasn't within the `children`.\n    // We decide to go with a strict behavior in that case; throwing. If users have\n    // some routes that don't mount the <InstantSearch> component, they would need\n    // to try/catch the `getServerState()` call.\n    // If this behavior turns out to be too strict for many users, we can decide\n    // to warn instead of throwing.\n    if (!searchRef.current) {\n      throw new Error(\"Unable to retrieve InstantSearch's server state in `getServerState()`. Did you mount the <InstantSearch> component?\");\n    }\n    return waitForResults(searchRef.current);\n  }).then(function () {\n    return {\n      initialResults: getInitialResults(searchRef.current.mainIndex)\n    };\n  });\n}"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,cAAc,QAAQ,mCAAmC;AACrF,SAASC,SAAS,QAAQ,wCAAwC;AAClE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,0BAA0B,EAAEC,wBAAwB,QAAQ,aAAa;AAClF;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAC7C,IAAIC,cAAc,GAAGD,IAAI,CAACC,cAAc;EACxC,IAAIC,SAAS,GAAG;IACdC,OAAO,EAAEC;EACX,CAAC;EACD,IAAIC,kBAAkB,GAAG,SAASA,kBAAkBA,CAAA,EAAG;IACrD,IAAIC,eAAe,GAAG,KAAK;IAC3B,IAAIC,YAAY,GAAG,SAASA,YAAYA,CAACC,KAAK,EAAE;MAC9C,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;MACzB,IAAIH,eAAe,EAAE;QACnB,MAAM,IAAII,KAAK,CAAC,8GAA8G,CAAC;MACjI;MACAJ,eAAe,GAAG,IAAI;MACtBJ,SAAS,CAACC,OAAO,GAAGM,MAAM;IAC5B,CAAC;IACD,OAAOF,YAAY;EACrB,CAAC;EACD,OAAOI,OAAO,CAAC;IACbZ,QAAQ,EAAEA,QAAQ;IAClBE,cAAc,EAAEA,cAAc;IAC9BC,SAAS,EAAEA,SAAS;IACpBK,YAAY,EAAEF,kBAAkB,CAAC;EACnC,CAAC,CAAC,CAACO,IAAI,CAAC,UAAUC,WAAW,EAAE;IAC7B,IAAIC,aAAa,GAAG,KAAK;;IAEzB;IACA;IACApB,SAAS,CAACQ,SAAS,CAACC,OAAO,CAACY,SAAS,EAAE,UAAUC,KAAK,EAAE;MACtDF,aAAa,GAAGA,aAAa,IAAIE,KAAK,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,MAAM,EAAE;QACzE,OAAOA,MAAM,CAACC,MAAM,KAAK,oBAAoB;MAC/C,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,IAAIN,aAAa,EAAE;MACjB,OAAOH,OAAO,CAAC;QACbZ,QAAQ,EAAE,aAAaJ,KAAK,CAAC0B,aAAa,CAACxB,wBAAwB,EAAEgB,WAAW,EAAEd,QAAQ,CAAC;QAC3FE,cAAc,EAAEA,cAAc;QAC9BC,SAAS,EAAEA,SAAS;QACpBK,YAAY,EAAEF,kBAAkB,CAAC;MACnC,CAAC,CAAC;IACJ;IACA,OAAOQ,WAAW;EACpB,CAAC,CAAC;AACJ;AACA,SAASF,OAAOA,CAACW,KAAK,EAAE;EACtB,IAAIvB,QAAQ,GAAGuB,KAAK,CAACvB,QAAQ;IAC3BE,cAAc,GAAGqB,KAAK,CAACrB,cAAc;IACrCM,YAAY,GAAGe,KAAK,CAACf,YAAY;IACjCL,SAAS,GAAGoB,KAAK,CAACpB,SAAS;EAC7B,OAAOqB,OAAO,CAACC,OAAO,CAAC,CAAC,CAACZ,IAAI,CAAC,YAAY;IACxCX,cAAc,EAAE,aAAaN,KAAK,CAAC0B,aAAa,CAACzB,0BAA0B,CAAC6B,QAAQ,EAAE;MACpFC,KAAK,EAAE;QACLnB,YAAY,EAAEA;MAChB;IACF,CAAC,EAAER,QAAQ,CAAC,CAAC;EACf,CAAC,CAAC,CAACa,IAAI,CAAC,YAAY;IAClB;MACE;MACA,IAAIW,OAAO,CAAC,UAAUC,OAAO,EAAE;QAC7B,OAAOG,UAAU,CAACH,OAAO,EAAE,CAAC,CAAC;MAC/B,CAAC;IAAC;EAEN,CAAC,CAAC,CAACZ,IAAI,CAAC,YAAY;IAClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACV,SAAS,CAACC,OAAO,EAAE;MACtB,MAAM,IAAIO,KAAK,CAAC,qHAAqH,CAAC;IACxI;IACA,OAAOjB,cAAc,CAACS,SAAS,CAACC,OAAO,CAAC;EAC1C,CAAC,CAAC,CAACS,IAAI,CAAC,YAAY;IAClB,OAAO;MACLgB,cAAc,EAAEpC,iBAAiB,CAACU,SAAS,CAACC,OAAO,CAACY,SAAS;IAC/D,CAAC;EACH,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}