{"ast":null,"code":"/*!\n * file-reader <https://github.com/jonschlinkert/file-reader>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar utils = require('./utils');\nfunction readFiles(patterns, options) {\n  var defaults = {};\n  defaults.renameKey = function (file) {\n    return utils.camelcase(file.stem);\n  };\n  defaults.decorate = {\n    content: readFiles.file\n  };\n  return utils.mapFiles(patterns, utils.extend(defaults, options));\n}\n\n/**\n * Expose `file`\n */\n\nreadFiles.file = function (file, options) {\n  if (typeof file === 'string') {\n    file = utils.mapFiles(file, options)[file];\n  }\n  if (!file.extname) return file.content;\n  return reader[file.extname](file.path, options);\n};\n\n/**\n * This is just a minimal start, pull requests welcome\n * for adding extensions/readers to the list.\n *\n * @param {String} `ext`\n * @return {Function} The file reader to use for the given `ext`\n * @api private\n */\n\nvar reader = {\n  // requireable\n  '.js': require,\n  '.json': require,\n  // common string formats\n  '.txt': readString,\n  '.md': readString,\n  '.markdown': readString,\n  '.mdown': readString,\n  '.hbs': readString,\n  '.htm': readString,\n  '.html': readString,\n  '.slim': readString,\n  '.swig': readString,\n  '.tmpl': readString,\n  '.css': readString,\n  '.less': readString,\n  '.sass': readString,\n  '.scss': readString,\n  '.styl': readString,\n  // common object formats\n  '.yaml': readYaml,\n  '.yml': readYaml\n};\nfunction readString(fp) {\n  return fs.readFileSync(fp, 'utf8');\n}\nfunction readYaml(fp, options) {\n  return utils.yaml.sync(fp);\n}\n\n/**\n * Expose `readFiles`\n */\n\nmodule.exports = readFiles;","map":{"version":3,"names":["fs","require","utils","readFiles","patterns","options","defaults","renameKey","file","camelcase","stem","decorate","content","mapFiles","extend","extname","reader","path","readString","readYaml","fp","readFileSync","yaml","sync","module","exports"],"sources":["C:/Users/Samue/OneDrive/Documents/University/Year 3/Computing Project/Code/RevisionWebApp/re-vision/node_modules/file-reader/index.js"],"sourcesContent":["/*!\n * file-reader <https://github.com/jonschlinkert/file-reader>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar utils = require('./utils');\n\nfunction readFiles(patterns, options) {\n  var defaults = {};\n  defaults.renameKey = function(file) {\n    return utils.camelcase(file.stem);\n  };\n  defaults.decorate = { content: readFiles.file };\n  return utils.mapFiles(patterns, utils.extend(defaults, options));\n}\n\n/**\n * Expose `file`\n */\n\nreadFiles.file = function(file, options) {\n  if (typeof file === 'string') {\n    file = utils.mapFiles(file, options)[file];\n  }\n  if (!file.extname) return file.content;\n  return reader[file.extname](file.path, options);\n};\n\n/**\n * This is just a minimal start, pull requests welcome\n * for adding extensions/readers to the list.\n *\n * @param {String} `ext`\n * @return {Function} The file reader to use for the given `ext`\n * @api private\n */\n\nvar reader = {\n  // requireable\n  '.js': require,\n  '.json': require,\n\n  // common string formats\n  '.txt': readString,\n  '.md': readString,\n  '.markdown': readString,\n  '.mdown': readString,\n\n  '.hbs': readString,\n  '.htm': readString,\n  '.html': readString,\n  '.slim': readString,\n  '.swig': readString,\n  '.tmpl': readString,\n\n  '.css': readString,\n  '.less': readString,\n  '.sass': readString,\n  '.scss': readString,\n  '.styl': readString,\n\n  // common object formats\n  '.yaml': readYaml,\n  '.yml': readYaml\n};\n\nfunction readString(fp) {\n  return fs.readFileSync(fp, 'utf8');\n}\n\nfunction readYaml(fp, options) {\n  return utils.yaml.sync(fp);\n}\n\n/**\n * Expose `readFiles`\n */\n\nmodule.exports = readFiles;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE9B,SAASE,SAASA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACpC,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjBA,QAAQ,CAACC,SAAS,GAAG,UAASC,IAAI,EAAE;IAClC,OAAON,KAAK,CAACO,SAAS,CAACD,IAAI,CAACE,IAAI,CAAC;EACnC,CAAC;EACDJ,QAAQ,CAACK,QAAQ,GAAG;IAAEC,OAAO,EAAET,SAAS,CAACK;EAAK,CAAC;EAC/C,OAAON,KAAK,CAACW,QAAQ,CAACT,QAAQ,EAAEF,KAAK,CAACY,MAAM,CAACR,QAAQ,EAAED,OAAO,CAAC,CAAC;AAClE;;AAEA;AACA;AACA;;AAEAF,SAAS,CAACK,IAAI,GAAG,UAASA,IAAI,EAAEH,OAAO,EAAE;EACvC,IAAI,OAAOG,IAAI,KAAK,QAAQ,EAAE;IAC5BA,IAAI,GAAGN,KAAK,CAACW,QAAQ,CAACL,IAAI,EAAEH,OAAO,CAAC,CAACG,IAAI,CAAC;EAC5C;EACA,IAAI,CAACA,IAAI,CAACO,OAAO,EAAE,OAAOP,IAAI,CAACI,OAAO;EACtC,OAAOI,MAAM,CAACR,IAAI,CAACO,OAAO,CAAC,CAACP,IAAI,CAACS,IAAI,EAAEZ,OAAO,CAAC;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIW,MAAM,GAAG;EACX;EACA,KAAK,EAAEf,OAAO;EACd,OAAO,EAAEA,OAAO;EAEhB;EACA,MAAM,EAAEiB,UAAU;EAClB,KAAK,EAAEA,UAAU;EACjB,WAAW,EAAEA,UAAU;EACvB,QAAQ,EAAEA,UAAU;EAEpB,MAAM,EAAEA,UAAU;EAClB,MAAM,EAAEA,UAAU;EAClB,OAAO,EAAEA,UAAU;EACnB,OAAO,EAAEA,UAAU;EACnB,OAAO,EAAEA,UAAU;EACnB,OAAO,EAAEA,UAAU;EAEnB,MAAM,EAAEA,UAAU;EAClB,OAAO,EAAEA,UAAU;EACnB,OAAO,EAAEA,UAAU;EACnB,OAAO,EAAEA,UAAU;EACnB,OAAO,EAAEA,UAAU;EAEnB;EACA,OAAO,EAAEC,QAAQ;EACjB,MAAM,EAAEA;AACV,CAAC;AAED,SAASD,UAAUA,CAACE,EAAE,EAAE;EACtB,OAAOpB,EAAE,CAACqB,YAAY,CAACD,EAAE,EAAE,MAAM,CAAC;AACpC;AAEA,SAASD,QAAQA,CAACC,EAAE,EAAEf,OAAO,EAAE;EAC7B,OAAOH,KAAK,CAACoB,IAAI,CAACC,IAAI,CAACH,EAAE,CAAC;AAC5B;;AAEA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGtB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}