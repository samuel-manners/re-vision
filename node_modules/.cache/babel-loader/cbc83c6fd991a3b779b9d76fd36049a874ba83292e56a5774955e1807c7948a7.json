{"ast":null,"code":"import { useMemo } from 'react';\nimport { sortFormats } from '../utils/FormatFilter';\n\n/**\n * Returns the best format for the given camera device.\n *\n * This function tries to choose a format with the highest possible photo-capture resolution and best matching aspect ratio.\n *\n * @param {CameraDevice} device The Camera Device\n *\n * @returns The best matching format for the given camera device, or `undefined` if the camera device is `undefined`.\n */\nexport function useCameraFormat(device) {\n  return useMemo(() => device === null || device === void 0 ? void 0 : device.formats.sort(sortFormats)[0], [device === null || device === void 0 ? void 0 : device.formats]);\n}","map":{"version":3,"names":["useMemo","sortFormats","useCameraFormat","device","formats","sort"],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\hooks\\useCameraFormat.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport type { CameraDevice, CameraDeviceFormat } from '../CameraDevice';\nimport { sortFormats } from '../utils/FormatFilter';\n\n/**\n * Returns the best format for the given camera device.\n *\n * This function tries to choose a format with the highest possible photo-capture resolution and best matching aspect ratio.\n *\n * @param {CameraDevice} device The Camera Device\n *\n * @returns The best matching format for the given camera device, or `undefined` if the camera device is `undefined`.\n */\nexport function useCameraFormat(device?: CameraDevice): CameraDeviceFormat | undefined {\n  return useMemo(() => device?.formats.sort(sortFormats)[0], [device?.formats]);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,WAAW,QAAQ,uBAAuB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,MAAqB,EAAkC;EACrF,OAAOH,OAAO,CAAC,MAAMG,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,OAAO,CAACC,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAACE,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,OAAO,CAAC,CAAC;AAC/E"},"metadata":{},"sourceType":"module","externalDependencies":[]}