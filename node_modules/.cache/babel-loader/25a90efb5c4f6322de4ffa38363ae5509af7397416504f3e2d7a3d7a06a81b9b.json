{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samue\\\\OneDrive\\\\Documents\\\\University\\\\Year 3\\\\Computing Project\\\\Code\\\\RevisionWebApp\\\\re-vision\\\\src\\\\components\\\\main\\\\components\\\\Camera.js\",\n  _s = $RefreshSig$();\n// import useRef, useState, useCallback, useEffect\nimport { useRef, useState, useCallback, useEffect } from \"react\";\n// import Webcam component\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomWebcam = () => {\n  _s();\n  const webcamRef = useRef(null); // create a webcam reference\n  const [imgSrc, setImgSrc] = useState(null); // initialize it\n\n  // Captures Photo\n  const capture = useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n  }, [webcamRef]);\n  const retake = () => {\n    setImgSrc(null);\n  };\n\n  /*-----------------------------------------------------------*/\n  //New send photo function\n  // define a function to send the image data to the API\n  const sendImages = imageData => {\n    // create a new FormData object\n    const data = new FormData();\n    // convert the image data from base64 to a blob\n    const blob = dataURItoBlob(imageData);\n    // append the image blob as a file object to the FormData object\n    data.append(\"file\", blob, \"photo.jpg\");\n    // make a POST request to the API endpoint with the FormData object as the body\n    fetch(\"https://example.com/api/upload\", {\n      method: \"POST\",\n      body: data\n    }).then(response => response.json()) // parse the response as JSON\n    .then(data => {\n      // handle the data from the API\n      console.log(data);\n    }).catch(error => {\n      // handle the error from the API\n      console.error(error);\n    });\n  };\n\n  // define a helper function to convert base64 image data to a blob\n  const dataURItoBlob = dataURI => {\n    // split the dataURI into metadata and binary data\n    const [meta, data] = dataURI.split(\",\");\n    // get the mime type from the metadata\n    const mimeType = meta.match(/:(.*?);/)[1];\n    // decode the base64 data to a byte string\n    const byteString = atob(data);\n    // create an array buffer with the same length as the byte string\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    // create a view of the array buffer\n    const view = new Uint8Array(arrayBuffer);\n    // loop through the byte string and store the values in the view\n    for (let i = 0; i < byteString.length; i++) {\n      view[i] = byteString.charCodeAt(i);\n    }\n    // create a blob from the array buffer and the mime type\n    const blob = new Blob([arrayBuffer], {\n      type: mimeType\n    });\n    // return the blob\n    return blob;\n  };\n\n  /*-----------------------------------------------------------*/\n  // Function for sending photo\n  const sendImage = async () => {\n    try {\n      // convert the image to a base64 string\n      const data = imgSrc.replace(/^data:image\\/jpeg;base64,/, \"\");\n      const response = await fetch(\"http://sam141.brighton.domains/cloudvisionapi\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          imgSrc\n        })\n      });\n      // handle the response\n      if (response.ok) {\n        console.log(\"Image sent successfully\");\n        console.log(response);\n      } else {\n        console.error(\"Error sending image\");\n        console.log(response);\n      }\n    } catch (error) {\n      console.log(\"Error when sending image - error as follows:\");\n      console.log(error);\n    }\n    ;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [imgSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imgSrc,\n      alt: \"webcam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Webcam\n    //height={960}\n    //width={540}\n    , {\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      screenshotQuality: 0.8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"BrowsePhotos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), imgSrc ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retake,\n          children: \"Retake photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendImages,\n          children: \"Send photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: capture,\n        children: \"Capture photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomWebcam, \"ESwUrLq+HE9liXlylGlqUDf3hvQ=\");\n_c = CustomWebcam;\nexport default CustomWebcam;\nvar _c;\n$RefreshReg$(_c, \"CustomWebcam\");","map":{"version":3,"names":["useRef","useState","useCallback","useEffect","Webcam","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomWebcam","_s","webcamRef","imgSrc","setImgSrc","capture","imageSrc","current","getScreenshot","retake","sendImages","imageData","data","FormData","blob","dataURItoBlob","append","fetch","method","body","then","response","json","console","log","catch","error","dataURI","meta","split","mimeType","match","byteString","atob","arrayBuffer","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","Blob","type","sendImage","replace","headers","JSON","stringify","ok","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","screenshotFormat","screenshotQuality","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Samue/OneDrive/Documents/University/Year 3/Computing Project/Code/RevisionWebApp/re-vision/src/components/main/components/Camera.js"],"sourcesContent":["// import useRef, useState, useCallback, useEffect\r\nimport { useRef, useState, useCallback, useEffect } from \"react\";\r\n// import Webcam component\r\nimport Webcam from \"react-webcam\";\r\n\r\nconst CustomWebcam = () => {\r\n  const webcamRef = useRef(null); // create a webcam reference\r\n  const [imgSrc, setImgSrc] = useState(null); // initialize it\r\n\r\n  // Captures Photo\r\n  const capture = useCallback(() => {\r\n    const imageSrc = webcamRef.current.getScreenshot();\r\n    setImgSrc(imageSrc);\r\n  }, [webcamRef]);\r\n\r\n  const retake = () => {\r\n    setImgSrc(null);\r\n  };\r\n\r\n  /*-----------------------------------------------------------*/\r\n  //New send photo function\r\n  // define a function to send the image data to the API\r\n  const sendImages = (imageData) => {\r\n    // create a new FormData object\r\n    const data = new FormData();\r\n    // convert the image data from base64 to a blob\r\n    const blob = dataURItoBlob(imageData);\r\n    // append the image blob as a file object to the FormData object\r\n    data.append(\"file\", blob, \"photo.jpg\");\r\n    // make a POST request to the API endpoint with the FormData object as the body\r\n    fetch(\"https://example.com/api/upload\", {\r\n      method: \"POST\",\r\n      body: data,\r\n    })\r\n      .then((response) => response.json()) // parse the response as JSON\r\n      .then((data) => {\r\n        // handle the data from the API\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        // handle the error from the API\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  // define a helper function to convert base64 image data to a blob\r\n  const dataURItoBlob = (dataURI) => {\r\n    // split the dataURI into metadata and binary data\r\n    const [meta, data] = dataURI.split(\",\");\r\n    // get the mime type from the metadata\r\n    const mimeType = meta.match(/:(.*?);/)[1];\r\n    // decode the base64 data to a byte string\r\n    const byteString = atob(data);\r\n    // create an array buffer with the same length as the byte string\r\n    const arrayBuffer = new ArrayBuffer(byteString.length);\r\n    // create a view of the array buffer\r\n    const view = new Uint8Array(arrayBuffer);\r\n    // loop through the byte string and store the values in the view\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      view[i] = byteString.charCodeAt(i);\r\n    }\r\n    // create a blob from the array buffer and the mime type\r\n    const blob = new Blob([arrayBuffer], { type: mimeType });\r\n    // return the blob\r\n    return blob;\r\n  };\r\n\r\n  /*-----------------------------------------------------------*/\r\n  // Function for sending photo\r\n  const sendImage = async () => {\r\n    try {\r\n\r\n      // convert the image to a base64 string\r\n      const data = imgSrc.replace(/^data:image\\/jpeg;base64,/, \"\");\r\n      const response = await fetch(\"http://sam141.brighton.domains/cloudvisionapi\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ imgSrc }),\r\n      })\r\n      // handle the response\r\n      if (response.ok) {\r\n        console.log(\"Image sent successfully\");\r\n        console.log(response);\r\n      } else {\r\n        console.error(\"Error sending image\");\r\n        console.log(response);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error when sending image - error as follows:\");\r\n      console.log(error);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {imgSrc ? (\r\n        <img src={imgSrc} alt=\"webcam\" />\r\n      ) : (\r\n        <Webcam\r\n          //height={960}\r\n          //width={540}\r\n          ref={webcamRef}\r\n          screenshotFormat=\"image/jpeg\"\r\n          screenshotQuality={0.8}\r\n        />\r\n      )}\r\n      <div className=\"btn-container\">\r\n        <button>BrowsePhotos</button>\r\n        {imgSrc ? (\r\n          <>\r\n            <button onClick={retake}>Retake photo</button>\r\n            <button onClick={sendImages}>Send photo</button>\r\n          </>\r\n        ) : (\r\n          <button onClick={capture}>Capture photo</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CustomWebcam;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}