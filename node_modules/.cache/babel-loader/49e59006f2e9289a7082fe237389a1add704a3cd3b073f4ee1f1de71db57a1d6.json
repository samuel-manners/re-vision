{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\CameraDevice.ts"],"sourcesContent":["import { Orientation } from './Orientation'\nimport type { PixelFormat } from './PixelFormat'\n\n/**\n * Represents the camera device position.\n *\n * * `\"back\"`: Indicates that the device is physically located on the back of the phone\n * * `\"front\"`: Indicates that the device is physically located on the front of the phone\n * * `\"external\"`: The camera device is an external camera, and has no fixed facing relative to the phone. (e.g. USB or Continuity Cameras)\n */\nexport type CameraPosition = 'front' | 'back' | 'external'\n\n/**\n * Indentifiers for a physical camera (one that actually exists on the back/front of the device)\n *\n * * `\"ultra-wide-angle-camera\"`: A built-in camera with a shorter focal length than that of a wide-angle camera. (FOV of 94째 or higher)\n * * `\"wide-angle-camera\"`: A built-in wide-angle camera. (FOV between 60째 and 94째)\n * * `\"telephoto-camera\"`: A built-in camera device with a longer focal length than a wide-angle camera. (FOV of 60째 or lower)\n *\n * Some Camera devices consist of multiple physical devices. They can be interpreted as _logical devices_, for example:\n *\n * * `\"ultra-wide-angle-camera\"` + `\"wide-angle-camera\"` = **dual wide-angle camera**.\n * * `\"wide-angle-camera\"` + `\"telephoto-camera\"` = **dual camera**.\n * * `\"ultra-wide-angle-camera\"` + `\"wide-angle-camera\"` + `\"telephoto-camera\"` = **triple camera**.\n */\nexport type PhysicalCameraDeviceType = 'ultra-wide-angle-camera' | 'wide-angle-camera' | 'telephoto-camera'\n\n/**\n * Indicates a format's autofocus system.\n *\n * * `\"none\"`: Indicates that autofocus is not available\n * * `\"contrast-detection\"`: Indicates that autofocus is achieved by contrast detection. Contrast detection performs a focus scan to find the optimal position\n * * `\"phase-detection\"`: Indicates that autofocus is achieved by phase detection. Phase detection has the ability to achieve focus in many cases without a focus scan. Phase detection autofocus is typically less visually intrusive than contrast detection autofocus\n */\nexport type AutoFocusSystem = 'contrast-detection' | 'phase-detection' | 'none'\n\n/**\n * Indicates a format's supported video stabilization mode. Enabling video stabilization may introduce additional latency into the video capture pipeline.\n *\n * * `\"off\"`: No video stabilization. Indicates that video should not be stabilized\n * * `\"standard\"`: Standard software-based video stabilization. Standard video stabilization reduces the field of view by about 10%.\n * * `\"cinematic\"`: Advanced software-based video stabilization. This applies more aggressive cropping or transformations than standard.\n * * `\"cinematic-extended\"`: Extended software- and hardware-based stabilization that aggressively crops and transforms the video to apply a smooth cinematic stabilization.\n * * `\"auto\"`: Indicates that the most appropriate video stabilization mode for the device and format should be chosen automatically\n */\nexport type VideoStabilizationMode = 'off' | 'standard' | 'cinematic' | 'cinematic-extended' | 'auto'\n\n/**\n * A Camera Device's stream-configuration format.\n *\n * A format specifies:\n * - Video Resolution (`videoWidth`/`videoHeight`)\n * - Photo Resolution (`photoWidth`/`photoHeight`)\n * - Possible FPS ranges (`fps`)\n * - Video Stabilization Modes (`videoStabilizationModes`)\n * - Pixel Formats (`pixelFormats`)\n */\nexport interface CameraDeviceFormat {\n  /**\n   * The height of the highest resolution a still image (photo) can be produced in\n   */\n  photoHeight: number\n  /**\n   * The width of the highest resolution a still image (photo) can be produced in\n   */\n  photoWidth: number\n  /**\n   * The video resolutions's height\n   */\n  videoHeight: number\n  /**\n   * The video resolution's width\n   */\n  videoWidth: number\n  /**\n   * Maximum supported ISO value\n   */\n  maxISO: number\n  /**\n   * Minimum supported ISO value\n   */\n  minISO: number\n  /**\n   * The video field of view in degrees\n   */\n  fieldOfView: number\n  /**\n   * The maximum zoom factor (e.g. `128`)\n   */\n  maxZoom: number\n  /**\n   * Specifies whether this format supports HDR mode for video capture\n   */\n  supportsVideoHdr: boolean\n  /**\n   * Specifies whether this format supports HDR mode for photo capture\n   */\n  supportsPhotoHdr: boolean\n  /**\n   * Specifies whether this format supports delivering depth data for photo or video capture.\n   */\n  supportsDepthCapture: boolean\n  /**\n   * The minum frame rate this Format needs to run at. High resolution formats often run at lower frame rates.\n   */\n  minFps: number\n  /**\n   * The maximum frame rate this Format is able to run at. High resolution formats often run at lower frame rates.\n   */\n  maxFps: number\n  /**\n   * Specifies this format's auto focus system.\n   */\n  autoFocusSystem: AutoFocusSystem\n  /**\n   * All supported video stabilization modes\n   */\n  videoStabilizationModes: VideoStabilizationMode[]\n  /**\n   * Specifies this format's supported pixel-formats.\n   * In most cases, this is `['native', 'yuv']`, some iPhones also support `'rgb'`.\n   *\n   * Any value represented here can be used to configure the Camera to stream Frames in the given {@linkcode PixelFormat}.\n   */\n  pixelFormats: PixelFormat[]\n}\n\n/**\n * Represents a camera device discovered by the {@linkcode Camera.getAvailableCameraDevices | Camera.getAvailableCameraDevices()} function\n */\nexport interface CameraDevice {\n  /**\n   * The native ID of the camera device instance.\n   */\n  id: string\n  /**\n   * The physical devices this `CameraDevice` consists of.\n   *\n   * * If this camera device is a **logical camera** (combination of multiple physical cameras, e.g. \"Triple Camera\"), there are multiple cameras in this array.\n   * * If this camera device is a **physical camera** (e.g. \"wide-angle-camera\"), there is only a single element in this array.\n   *\n   * You can check if the camera is a logical multi-camera by using the `isMultiCam` property.\n   */\n  physicalDevices: PhysicalCameraDeviceType[]\n  /**\n   * Specifies the physical position of this camera.\n   * - `back`: The Camera Device is located on the back of the phone. These devices can be used for capturing what's in front of the user.\n   * - `front`: The Camera Device is located on the front of the phone. These devices can be used for selfies or FaceTime.\n   * - `external`: The Camera Device is an external device. These devices can be either:\n   *     - USB Camera Devices (if they support the [USB Video Class (UVC) Specification](https://en.wikipedia.org/wiki/List_of_USB_video_class_devices))\n   *     - [Continuity Camera Devices](https://support.apple.com/en-us/HT213244) (e.g. your iPhone's or Mac's Camera connected through WiFi/Continuity)\n   *     - Bluetooth/WiFi Camera Devices (if they are supported in the platform-native Camera APIs; Camera2 and AVFoundation)\n   */\n  position: CameraPosition\n  /**\n   * A friendly localized name describing the camera.\n   */\n  name: string\n  /**\n   * Specifies whether this camera supports enabling flash for photo capture.\n   */\n  hasFlash: boolean\n  /**\n   * Specifies whether this camera supports continuously enabling the flash to act like a torch (flash with video capture)\n   */\n  hasTorch: boolean\n  /**\n   * The minimum distance this device can properly focus to (in centimeters/cm) or `0` if unknown.\n   */\n  minFocusDistance: number\n  /**\n   * A property indicating whether the device is a virtual multi-camera consisting of multiple combined physical cameras.\n   *\n   * Examples:\n   * * The Dual Camera, which supports seamlessly switching between a wide and telephoto camera while zooming and generating depth data from the disparities between the different points of view of the physical cameras.\n   * * The TrueDepth Camera, which generates depth data from disparities between a YUV camera and an Infrared camera pointed in the same direction.\n   */\n  isMultiCam: boolean\n  /**\n   * Minimum available zoom factor (e.g. `1`)\n   */\n  minZoom: number\n  /**\n   * Maximum available zoom factor (e.g. `128`)\n   */\n  maxZoom: number\n  /**\n   * The zoom factor where the camera is \"neutral\".\n   *\n   * * For single-physical cameras this property is always `1.0`.\n   * * For multi cameras this property is a value between `minZoom` and `maxZoom`, where the camera is in _wide-angle_ mode and hasn't switched to the _ultra-wide-angle_ (\"fish-eye\") or telephoto camera yet.\n   *\n   * Use this value as an initial value for the zoom property if you implement custom zoom. (e.g. reanimated shared value should be initially set to this value)\n   * @example\n   * const device = ...\n   *\n   * const zoom = useSharedValue(device.neutralZoom) // <-- initial value so it doesn't start at ultra-wide\n   * const cameraProps = useAnimatedProps(() => ({\n   *   zoom: zoom.value\n   * }))\n   */\n  neutralZoom: number\n  /**\n   * The minimum Exposure-Bias value this format supports. When setting the `exposure` to this value, the image is almost completely dark (under-exposed).\n   */\n  minExposure: number\n  /**\n   * The maximum Exposure-Bias value this format supports. When setting the `exposure` to this value, the image is almost completely bright (over-exposed).\n   */\n  maxExposure: number\n  /**\n   * All available formats for this camera device. Use this to find the best format for your use case and set it to the Camera's {@linkcode CameraProps.format | Camera's .format} property.\n   *\n   * See [the Camera Formats documentation](https://react-native-vision-camera.com/docs/guides/formats) for more information about Camera Formats.\n   */\n  formats: CameraDeviceFormat[]\n  /**\n   * Whether this camera device supports low light boost.\n   */\n  supportsLowLightBoost: boolean\n  /**\n   * Whether this camera supports taking photos in RAW format\n   *\n   * **! Work in Progress !**\n   */\n  supportsRawCapture: boolean\n  /**\n   * Specifies whether this device supports focusing ({@linkcode Camera.focus | Camera.focus(...)})\n   */\n  supportsFocus: boolean\n  /**\n   * The hardware level of the Camera.\n   * - On Android, some older devices are running at a `legacy` or `limited` level which means they are running in a backwards compatible mode.\n   * - On iOS, all devices are `full`.\n   */\n  hardwareLevel: 'legacy' | 'limited' | 'full'\n  /**\n   * Represents the sensor's orientation relative to the phone.\n   * For most phones this will be landscape, as Camera sensors are usually always rotated by 90 degrees (i.e. width and height are flipped).\n   */\n  sensorOrientation: Orientation\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}