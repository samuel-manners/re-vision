{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n/* eslint-disable complexity */\n\n/*\n * Code taken from dequal/lite v2.0.0\n * https://github.com/lukeed/dequal/blob/9aa73181ac7e081cd330cac67d313632ac04bb02/src/lite.js\n *\n * It adds a 3rd argument `compare(a, b)` that lets execute custom logic to\n * compare values.\n * We use it to skip comparing function references.\n */\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nvar has = Object.prototype.hasOwnProperty;\nexport function dequal(foo, bar, compare) {\n  // start of custom implementation\n  if (compare !== null && compare !== void 0 && compare(foo, bar)) {\n    return true;\n  }\n  // end of custom implementation\n\n  var ctor;\n  var len;\n  if (foo === bar) return true;\n  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n    if (ctor === Date) return foo.getTime() === bar.getTime();\n    if (ctor === RegExp) return foo.toString() === bar.toString();\n    if (ctor === Array) {\n      if ((len = foo.length) === bar.length) {\n        while (len-- && dequal(foo[len], bar[len], compare));\n      }\n      return len === -1;\n    }\n    if (!ctor || _typeof(foo) === 'object') {\n      len = 0;\n      // eslint-disable-next-line guard-for-in, no-restricted-syntax\n      for (ctor in foo) {\n        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor], compare)) return false;\n      }\n      return Object.keys(bar).length === len;\n    }\n  }\n\n  // eslint-disable-next-line no-self-compare\n  return foo !== foo && bar !== bar;\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","has","Object","hasOwnProperty","dequal","foo","bar","compare","ctor","len","Date","getTime","RegExp","toString","Array","length","call","keys"],"sources":["C:/Users/Samue/OneDrive/Documents/University/Year 3/Computing Project/Code/RevisionWebApp/re-vision/node_modules/react-instantsearch-core/dist/es/lib/dequal.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/* eslint-disable complexity */\n\n/*\n * Code taken from dequal/lite v2.0.0\n * https://github.com/lukeed/dequal/blob/9aa73181ac7e081cd330cac67d313632ac04bb02/src/lite.js\n *\n * It adds a 3rd argument `compare(a, b)` that lets execute custom logic to\n * compare values.\n * We use it to skip comparing function references.\n */\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nvar has = Object.prototype.hasOwnProperty;\nexport function dequal(foo, bar, compare) {\n  // start of custom implementation\n  if (compare !== null && compare !== void 0 && compare(foo, bar)) {\n    return true;\n  }\n  // end of custom implementation\n\n  var ctor;\n  var len;\n  if (foo === bar) return true;\n  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n    if (ctor === Date) return foo.getTime() === bar.getTime();\n    if (ctor === RegExp) return foo.toString() === bar.toString();\n    if (ctor === Array) {\n      if ((len = foo.length) === bar.length) {\n        while (len-- && dequal(foo[len], bar[len], compare));\n      }\n      return len === -1;\n    }\n    if (!ctor || _typeof(foo) === 'object') {\n      len = 0;\n      // eslint-disable-next-line guard-for-in, no-restricted-syntax\n      for (ctor in foo) {\n        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor], compare)) return false;\n      }\n      return Object.keys(bar).length === len;\n    }\n  }\n\n  // eslint-disable-next-line no-self-compare\n  return foo !== foo && bar !== bar;\n}"],"mappings":"AAAA,SAASA,OAAOA,CAACC,GAAG,EAAE;EAAE,yBAAyB;;EAAE,OAAOD,OAAO,GAAG,UAAU,IAAI,OAAOE,MAAM,IAAI,QAAQ,IAAI,OAAOA,MAAM,CAACC,QAAQ,GAAG,UAAUF,GAAG,EAAE;IAAE,OAAO,OAAOA,GAAG;EAAE,CAAC,GAAG,UAAUA,GAAG,EAAE;IAAE,OAAOA,GAAG,IAAI,UAAU,IAAI,OAAOC,MAAM,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;EAAE,CAAC,EAAED,OAAO,CAACC,GAAG,CAAC;AAAE;AAC/U;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIK,GAAG,GAAGC,MAAM,CAACF,SAAS,CAACG,cAAc;AACzC,OAAO,SAASC,MAAMA,CAACC,GAAG,EAAEC,GAAG,EAAEC,OAAO,EAAE;EACxC;EACA,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,IAAIA,OAAO,CAACF,GAAG,EAAEC,GAAG,CAAC,EAAE;IAC/D,OAAO,IAAI;EACb;EACA;;EAEA,IAAIE,IAAI;EACR,IAAIC,GAAG;EACP,IAAIJ,GAAG,KAAKC,GAAG,EAAE,OAAO,IAAI;EAC5B,IAAID,GAAG,IAAIC,GAAG,IAAI,CAACE,IAAI,GAAGH,GAAG,CAACN,WAAW,MAAMO,GAAG,CAACP,WAAW,EAAE;IAC9D,IAAIS,IAAI,KAAKE,IAAI,EAAE,OAAOL,GAAG,CAACM,OAAO,CAAC,CAAC,KAAKL,GAAG,CAACK,OAAO,CAAC,CAAC;IACzD,IAAIH,IAAI,KAAKI,MAAM,EAAE,OAAOP,GAAG,CAACQ,QAAQ,CAAC,CAAC,KAAKP,GAAG,CAACO,QAAQ,CAAC,CAAC;IAC7D,IAAIL,IAAI,KAAKM,KAAK,EAAE;MAClB,IAAI,CAACL,GAAG,GAAGJ,GAAG,CAACU,MAAM,MAAMT,GAAG,CAACS,MAAM,EAAE;QACrC,OAAON,GAAG,EAAE,IAAIL,MAAM,CAACC,GAAG,CAACI,GAAG,CAAC,EAAEH,GAAG,CAACG,GAAG,CAAC,EAAEF,OAAO,CAAC,CAAC;MACtD;MACA,OAAOE,GAAG,KAAK,CAAC,CAAC;IACnB;IACA,IAAI,CAACD,IAAI,IAAIb,OAAO,CAACU,GAAG,CAAC,KAAK,QAAQ,EAAE;MACtCI,GAAG,GAAG,CAAC;MACP;MACA,KAAKD,IAAI,IAAIH,GAAG,EAAE;QAChB,IAAIJ,GAAG,CAACe,IAAI,CAACX,GAAG,EAAEG,IAAI,CAAC,IAAI,EAAEC,GAAG,IAAI,CAACR,GAAG,CAACe,IAAI,CAACV,GAAG,EAAEE,IAAI,CAAC,EAAE,OAAO,KAAK;QACtE,IAAI,EAAEA,IAAI,IAAIF,GAAG,CAAC,IAAI,CAACF,MAAM,CAACC,GAAG,CAACG,IAAI,CAAC,EAAEF,GAAG,CAACE,IAAI,CAAC,EAAED,OAAO,CAAC,EAAE,OAAO,KAAK;MAC5E;MACA,OAAOL,MAAM,CAACe,IAAI,CAACX,GAAG,CAAC,CAACS,MAAM,KAAKN,GAAG;IACxC;EACF;;EAEA;EACA,OAAOJ,GAAG,KAAKA,GAAG,IAAIC,GAAG,KAAKA,GAAG;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}