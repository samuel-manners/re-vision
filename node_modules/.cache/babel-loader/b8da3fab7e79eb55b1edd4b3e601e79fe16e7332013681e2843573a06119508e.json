{"ast":null,"code":"import { CameraRuntimeError } from './CameraError';\n\n// only import typescript types\n\nimport { CameraModule } from './NativeCameraModule';\nimport { assertJSIAvailable } from './JSIHelper';\nconst errorMessage = 'Frame Processors are not available, react-native-worklets-core is not installed!';\nlet hasWorklets = false;\nlet isAsyncContextBusy = {\n  value: false\n};\nlet runOnAsyncContext = (_frame, _func) => {\n  throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage);\n};\nlet throwJSError = error => {\n  throw error;\n};\ntry {\n  assertJSIAvailable();\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const {\n    Worklets\n  } = require('react-native-worklets-core');\n  const throwErrorOnJS = Worklets.createRunInJsFn((message, stack) => {\n    const error = new Error();\n    error.message = message;\n    error.stack = stack;\n    error.name = 'Frame Processor Error';\n    // @ts-expect-error this is react-native specific\n    error.jsEngine = 'VisionCamera';\n    // From react-native:\n    // @ts-ignore the reportFatalError method is an internal method of ErrorUtils not exposed in the type definitions\n    global.ErrorUtils.reportFatalError(error);\n  });\n  throwJSError = error => {\n    'worklet';\n\n    const safeError = error;\n    const message = safeError != null && 'message' in safeError ? safeError.message : 'Frame Processor threw an error.';\n    throwErrorOnJS(message, safeError === null || safeError === void 0 ? void 0 : safeError.stack);\n  };\n  isAsyncContextBusy = Worklets.createSharedValue(false);\n  const asyncContext = Worklets.createContext('VisionCamera.async');\n  runOnAsyncContext = Worklets.createRunInContextFn((frame, func) => {\n    'worklet';\n\n    try {\n      // Call long-running function\n      func();\n    } catch (e) {\n      // Re-throw error on JS Thread\n      throwJSError(e);\n    } finally {\n      // Potentially delete Frame if we were the last ref\n      const internal = frame;\n      internal.decrementRefCount();\n      isAsyncContextBusy.value = false;\n    }\n  }, asyncContext);\n  hasWorklets = true;\n} catch (e) {\n  // Worklets are not installed, so Frame Processors are disabled.\n}\nlet proxy = {\n  initFrameProcessorPlugin: () => {\n    throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage);\n  },\n  removeFrameProcessor: () => {\n    throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage);\n  },\n  setFrameProcessor: () => {\n    throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage);\n  },\n  throwJSError: throwJSError\n};\nif (hasWorklets) {\n  // Install native Frame Processor Runtime Manager\n  const result = CameraModule.installFrameProcessorBindings();\n  if (result !== true) throw new CameraRuntimeError('system/frame-processors-unavailable', 'Failed to install Frame Processor JSI bindings!');\n\n  // @ts-expect-error global is untyped, it's a C++ host-object\n  proxy = global.VisionCameraProxy;\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (proxy == null) {\n    throw new CameraRuntimeError('system/frame-processors-unavailable', 'Failed to install VisionCameraProxy. Are Frame Processors properly enabled?');\n  }\n}\nexport const VisionCameraProxy = {\n  initFrameProcessorPlugin: proxy.initFrameProcessorPlugin,\n  removeFrameProcessor: proxy.removeFrameProcessor,\n  setFrameProcessor: proxy.setFrameProcessor,\n  throwJSError: throwJSError,\n  // TODO: Remove this in the next version\n  // @ts-expect-error\n  getFrameProcessorPlugin: (name, options) => {\n    console.warn('\"getFrameProcessorPlugin\" has been renamed to \"initFrameProcessorPlugin\". This function will be removed in the next release.');\n    return proxy.initFrameProcessorPlugin(name, options);\n  }\n};\nfunction getLastFrameProcessorCall(frameProcessorFuncId) {\n  'worklet';\n\n  var _global$__frameProces;\n  return ((_global$__frameProces = global.__frameProcessorRunAtTargetFpsMap) === null || _global$__frameProces === void 0 ? void 0 : _global$__frameProces[frameProcessorFuncId]) ?? 0;\n}\nfunction setLastFrameProcessorCall(frameProcessorFuncId, value) {\n  'worklet';\n\n  if (global.__frameProcessorRunAtTargetFpsMap == null) global.__frameProcessorRunAtTargetFpsMap = {};\n  global.__frameProcessorRunAtTargetFpsMap[frameProcessorFuncId] = value;\n}\n\n/**\n * Runs the given function at the given target FPS rate.\n *\n * For example, if you want to run a heavy face detection algorithm\n * only once per second, you can use `runAtTargetFps(1, ...)` to\n * throttle it to 1 FPS.\n *\n * @param fps The target FPS rate at which the given function should be executed\n * @param func The function to execute.\n * @returns The result of the function if it was executed, or `undefined` otherwise.\n * @example\n *\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   console.log('New Frame')\n *   runAtTargetFps(5, () => {\n *     'worklet'\n *     const faces = detectFaces(frame)\n *     console.log(`Detected a new face: ${faces[0]}`)\n *   })\n * })\n * ```\n */\nexport function runAtTargetFps(fps, func) {\n  'worklet';\n\n  // @ts-expect-error\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const funcId = func.__workletHash ?? '1';\n  const targetIntervalMs = 1000 / fps; // <-- 60 FPS => 16,6667ms interval\n  const now = performance.now();\n  const diffToLastCall = now - getLastFrameProcessorCall(funcId);\n  if (diffToLastCall >= targetIntervalMs) {\n    setLastFrameProcessorCall(funcId, now);\n    // Last Frame Processor call is already so long ago that we want to make a new call\n    return func();\n  }\n  return undefined;\n}\n\n/**\n * Runs the given function asynchronously, while keeping a strong reference to the Frame.\n *\n * For example, if you want to run a heavy face detection algorithm\n * while still drawing to the screen at 60 FPS, you can use `runAsync(...)`\n * to offload the face detection algorithm to a separate thread.\n *\n * @param frame The current Frame of the Frame Processor.\n * @param func The function to execute.\n * @example\n *\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   console.log('New Frame')\n *   runAsync(frame, () => {\n *     'worklet'\n *     const faces = detectFaces(frame)\n *     const face = [faces0]\n *     console.log(`Detected a new face: ${face}`)\n *   })\n * })\n * ```\n */\nexport function runAsync(frame, func) {\n  'worklet';\n\n  if (isAsyncContextBusy.value) {\n    // async context is currently busy, we cannot schedule new work in time.\n    // drop this frame/runAsync call.\n    return;\n  }\n\n  // Increment ref count by one\n  const internal = frame;\n  internal.incrementRefCount();\n  isAsyncContextBusy.value = true;\n\n  // Call in separate background context\n  runOnAsyncContext(frame, func);\n}","map":{"version":3,"names":["CameraRuntimeError","CameraModule","assertJSIAvailable","errorMessage","hasWorklets","isAsyncContextBusy","value","runOnAsyncContext","_frame","_func","throwJSError","error","Worklets","require","throwErrorOnJS","createRunInJsFn","message","stack","Error","name","jsEngine","global","ErrorUtils","reportFatalError","safeError","createSharedValue","asyncContext","createContext","createRunInContextFn","frame","func","e","internal","decrementRefCount","proxy","initFrameProcessorPlugin","removeFrameProcessor","setFrameProcessor","result","installFrameProcessorBindings","VisionCameraProxy","getFrameProcessorPlugin","options","console","warn","getLastFrameProcessorCall","frameProcessorFuncId","_global$__frameProces","__frameProcessorRunAtTargetFpsMap","setLastFrameProcessorCall","runAtTargetFps","fps","funcId","__workletHash","targetIntervalMs","now","performance","diffToLastCall","undefined","runAsync","incrementRefCount"],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\FrameProcessorPlugins.ts"],"sourcesContent":["import type { Frame, FrameInternal } from './Frame'\nimport type { FrameProcessor } from './CameraProps'\nimport { CameraRuntimeError } from './CameraError'\n\n// only import typescript types\nimport type TWorklets from 'react-native-worklets-core'\nimport { CameraModule } from './NativeCameraModule'\nimport { assertJSIAvailable } from './JSIHelper'\n\ntype BasicParameterType = string | number | boolean | undefined\ntype ParameterType = BasicParameterType | BasicParameterType[] | Record<string, BasicParameterType | undefined>\n\ninterface FrameProcessorPlugin {\n  /**\n   * Call the native Frame Processor Plugin with the given Frame and options.\n   * @param frame The Frame from the Frame Processor.\n   * @param options (optional) Additional options. Options will be converted to a native dictionary\n   * @returns (optional) A value returned from the native Frame Processor Plugin (or undefined)\n   */\n  call: (frame: Frame, options?: Record<string, ParameterType>) => ParameterType\n}\n\ninterface TVisionCameraProxy {\n  setFrameProcessor: (viewTag: number, frameProcessor: FrameProcessor) => void\n  removeFrameProcessor: (viewTag: number) => void\n  /**\n   * Creates a new instance of a native Frame Processor Plugin.\n   * The Plugin has to be registered on the native side, otherwise this returns `undefined`.\n   * @param name The name of the Frame Processor Plugin. This has to be the same name as on the native side.\n   * @param options (optional) Options, as a native dictionary, passed to the constructor/init-function of the native plugin.\n   * @example\n   * ```ts\n   * const plugin = VisionCameraProxy.initFrameProcessorPlugin('scanFaces', { model: 'fast' })\n   * if (plugin == null) throw new Error(\"Failed to load scanFaces plugin!\")\n   * ```\n   */\n  initFrameProcessorPlugin: (name: string, options?: Record<string, ParameterType>) => FrameProcessorPlugin | undefined\n  /**\n   * Throws the given error.\n   */\n  throwJSError: (error: unknown) => void\n}\n\nconst errorMessage = 'Frame Processors are not available, react-native-worklets-core is not installed!'\n\nlet hasWorklets = false\nlet isAsyncContextBusy = { value: false }\nlet runOnAsyncContext = (_frame: Frame, _func: () => void): void => {\n  throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage)\n}\nlet throwJSError = (error: unknown): void => {\n  throw error\n}\n\ntry {\n  assertJSIAvailable()\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const { Worklets } = require('react-native-worklets-core') as typeof TWorklets\n\n  const throwErrorOnJS = Worklets.createRunInJsFn((message: string, stack: string | undefined) => {\n    const error = new Error()\n    error.message = message\n    error.stack = stack\n    error.name = 'Frame Processor Error'\n    // @ts-expect-error this is react-native specific\n    error.jsEngine = 'VisionCamera'\n    // From react-native:\n    // @ts-ignore the reportFatalError method is an internal method of ErrorUtils not exposed in the type definitions\n    global.ErrorUtils.reportFatalError(error)\n  })\n  throwJSError = (error) => {\n    'worklet'\n    const safeError = error as Error | undefined\n    const message = safeError != null && 'message' in safeError ? safeError.message : 'Frame Processor threw an error.'\n    throwErrorOnJS(message, safeError?.stack)\n  }\n\n  isAsyncContextBusy = Worklets.createSharedValue(false)\n  const asyncContext = Worklets.createContext('VisionCamera.async')\n  runOnAsyncContext = Worklets.createRunInContextFn((frame: Frame, func: () => void) => {\n    'worklet'\n    try {\n      // Call long-running function\n      func()\n    } catch (e) {\n      // Re-throw error on JS Thread\n      throwJSError(e)\n    } finally {\n      // Potentially delete Frame if we were the last ref\n      const internal = frame as FrameInternal\n      internal.decrementRefCount()\n\n      isAsyncContextBusy.value = false\n    }\n  }, asyncContext)\n  hasWorklets = true\n} catch (e) {\n  // Worklets are not installed, so Frame Processors are disabled.\n}\n\nlet proxy: TVisionCameraProxy = {\n  initFrameProcessorPlugin: () => {\n    throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage)\n  },\n  removeFrameProcessor: () => {\n    throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage)\n  },\n  setFrameProcessor: () => {\n    throw new CameraRuntimeError('system/frame-processors-unavailable', errorMessage)\n  },\n  throwJSError: throwJSError,\n}\nif (hasWorklets) {\n  // Install native Frame Processor Runtime Manager\n  const result = CameraModule.installFrameProcessorBindings() as unknown\n  if (result !== true)\n    throw new CameraRuntimeError('system/frame-processors-unavailable', 'Failed to install Frame Processor JSI bindings!')\n\n  // @ts-expect-error global is untyped, it's a C++ host-object\n  proxy = global.VisionCameraProxy as TVisionCameraProxy\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (proxy == null) {\n    throw new CameraRuntimeError(\n      'system/frame-processors-unavailable',\n      'Failed to install VisionCameraProxy. Are Frame Processors properly enabled?',\n    )\n  }\n}\n\nexport const VisionCameraProxy: TVisionCameraProxy = {\n  initFrameProcessorPlugin: proxy.initFrameProcessorPlugin,\n  removeFrameProcessor: proxy.removeFrameProcessor,\n  setFrameProcessor: proxy.setFrameProcessor,\n  throwJSError: throwJSError,\n  // TODO: Remove this in the next version\n  // @ts-expect-error\n  getFrameProcessorPlugin: (name, options) => {\n    console.warn(\n      '\"getFrameProcessorPlugin\" has been renamed to \"initFrameProcessorPlugin\". This function will be removed in the next release.',\n    )\n    return proxy.initFrameProcessorPlugin(name, options)\n  },\n}\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __frameProcessorRunAtTargetFpsMap: Record<string, number | undefined> | undefined\n  // eslint-disable-next-line no-var\n  var __ErrorUtils:\n    | {\n        reportFatalError: (error: unknown) => void\n      }\n    | undefined\n}\n\nfunction getLastFrameProcessorCall(frameProcessorFuncId: string): number {\n  'worklet'\n  return global.__frameProcessorRunAtTargetFpsMap?.[frameProcessorFuncId] ?? 0\n}\nfunction setLastFrameProcessorCall(frameProcessorFuncId: string, value: number): void {\n  'worklet'\n  if (global.__frameProcessorRunAtTargetFpsMap == null) global.__frameProcessorRunAtTargetFpsMap = {}\n  global.__frameProcessorRunAtTargetFpsMap[frameProcessorFuncId] = value\n}\n\n/**\n * Runs the given function at the given target FPS rate.\n *\n * For example, if you want to run a heavy face detection algorithm\n * only once per second, you can use `runAtTargetFps(1, ...)` to\n * throttle it to 1 FPS.\n *\n * @param fps The target FPS rate at which the given function should be executed\n * @param func The function to execute.\n * @returns The result of the function if it was executed, or `undefined` otherwise.\n * @example\n *\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   console.log('New Frame')\n *   runAtTargetFps(5, () => {\n *     'worklet'\n *     const faces = detectFaces(frame)\n *     console.log(`Detected a new face: ${faces[0]}`)\n *   })\n * })\n * ```\n */\nexport function runAtTargetFps<T>(fps: number, func: () => T): T | undefined {\n  'worklet'\n  // @ts-expect-error\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const funcId = func.__workletHash ?? '1'\n\n  const targetIntervalMs = 1000 / fps // <-- 60 FPS => 16,6667ms interval\n  const now = performance.now()\n  const diffToLastCall = now - getLastFrameProcessorCall(funcId)\n  if (diffToLastCall >= targetIntervalMs) {\n    setLastFrameProcessorCall(funcId, now)\n    // Last Frame Processor call is already so long ago that we want to make a new call\n    return func()\n  }\n  return undefined\n}\n\n/**\n * Runs the given function asynchronously, while keeping a strong reference to the Frame.\n *\n * For example, if you want to run a heavy face detection algorithm\n * while still drawing to the screen at 60 FPS, you can use `runAsync(...)`\n * to offload the face detection algorithm to a separate thread.\n *\n * @param frame The current Frame of the Frame Processor.\n * @param func The function to execute.\n * @example\n *\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   console.log('New Frame')\n *   runAsync(frame, () => {\n *     'worklet'\n *     const faces = detectFaces(frame)\n *     const face = [faces0]\n *     console.log(`Detected a new face: ${face}`)\n *   })\n * })\n * ```\n */\nexport function runAsync(frame: Frame, func: () => void): void {\n  'worklet'\n\n  if (isAsyncContextBusy.value) {\n    // async context is currently busy, we cannot schedule new work in time.\n    // drop this frame/runAsync call.\n    return\n  }\n\n  // Increment ref count by one\n  const internal = frame as FrameInternal\n  internal.incrementRefCount()\n\n  isAsyncContextBusy.value = true\n\n  // Call in separate background context\n  runOnAsyncContext(frame, func)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}