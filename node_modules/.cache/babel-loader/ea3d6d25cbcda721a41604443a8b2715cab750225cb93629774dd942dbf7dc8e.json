{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samue\\\\OneDrive\\\\Documents\\\\University\\\\Year 3\\\\Computing Project\\\\Code\\\\RevisionWebApp\\\\re-vision\\\\src\\\\components\\\\main\\\\Camera.js\",\n  _s = $RefreshSig$();\n//Code Ref: https://blog.logrocket.com/using-react-webcam-capture-display-images/\nimport { useRef, useState, useCallback } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { saveAs } from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomWebcam = () => {\n  _s();\n  const webcamRef = useRef(null); // create a webcam reference\n  const [imgSrc, setImgSrc] = useState(null); // initialize it\n  let imageTaken = false;\n  // Captures Photo\n  const capture = useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n  }, [webcamRef]);\n  const retake = () => {\n    setImgSrc(null);\n    imageTaken = false;\n  };\n  const saveImage = () => {\n    if (imageTaken == true) {\n      while (imageTaken == true) {\n        retake;\n      }\n    }\n    const imageSrc = webcamRef.current.getScreenshot();\n    const blob = dataURItoBlob(imageSrc);\n    saveAs(blob, \"my-image.jpg\");\n  };\n\n  // Convert data URI to binary array\n  function dataURItoBlob(dataURI) {\n    // Split the data URI into parts\n    let parts = dataURI.split(\",\");\n    // Get the content type (image/jpeg)\n    let type = parts[0].split(\":\")[1].split(\";\")[0];\n    // Decode the base64 data\n    let data = atob(parts[1]);\n    // Create a binary array\n    let array = [];\n    for (var i = 0; i < data.length; i++) {\n      array.push(data.charCodeAt(i));\n    }\n    // Return a Blob object\n    return new Blob([new Uint8Array(array)], {\n      type: type\n    });\n  }\n\n  // Function for sending photo\n  async function sendImage(imageSrc) {\n    const runFunction = false;\n    if (runFunction === true) {\n      try {\n        // get the image file as a blob\n        const responses = await fetch(imageSrc);\n        const blob = await responses.blob();\n\n        // create a FormData object and append the blob\n        const formData = new FormData();\n        formData.append(\"image\", blob, \"image.jpg\");\n\n        // send the request with the FormData as the body\n        const response = await fetch(\"http://sam141.brighton.domains/cloudvisionapi\", {\n          method: \"POST\",\n          body: formData\n        });\n        // handle the response\n        if (response.ok) {\n          console.log(\"Image sent successfully\");\n          console.log(response);\n        } else {\n          console.error(\"Error sending image - response as follows:\");\n          console.log(response);\n        }\n      } catch (error) {\n        console.log(\"Error when sending image - error as follows:\");\n        console.log(error);\n      }\n      ;\n    } else {\n      console.log('Not currently sending responses');\n    }\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [imgSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imgSrc,\n      alt: \"webcam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Webcam\n    //height={960}\n    //width={540}\n    , {\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      screenshotQuality: 0.8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveImage,\n        children: \"Save photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), imgSrc ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retake,\n          children: \"Retake photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: capture,\n        children: \"Capture photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendImage,\n        children: \"Send photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomWebcam, \"ESwUrLq+HE9liXlylGlqUDf3hvQ=\");\n_c = CustomWebcam;\nexport default CustomWebcam;\nvar _c;\n$RefreshReg$(_c, \"CustomWebcam\");","map":{"version":3,"names":["useRef","useState","useCallback","Webcam","saveAs","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomWebcam","_s","webcamRef","imgSrc","setImgSrc","imageTaken","capture","imageSrc","current","getScreenshot","retake","saveImage","blob","dataURItoBlob","dataURI","parts","split","type","data","atob","array","i","length","push","charCodeAt","Blob","Uint8Array","sendImage","runFunction","responses","fetch","formData","FormData","append","response","method","body","ok","console","log","error","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","screenshotFormat","screenshotQuality","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Samue/OneDrive/Documents/University/Year 3/Computing Project/Code/RevisionWebApp/re-vision/src/components/main/Camera.js"],"sourcesContent":["//Code Ref: https://blog.logrocket.com/using-react-webcam-capture-display-images/\r\nimport { useRef, useState, useCallback } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nconst CustomWebcam = () => {\r\n  const webcamRef = useRef(null); // create a webcam reference\r\n  const [imgSrc, setImgSrc] = useState(null); // initialize it\r\n  let imageTaken = false;\r\n  // Captures Photo\r\n  const capture = useCallback(() => {\r\n    const imageSrc = webcamRef.current.getScreenshot();\r\n    setImgSrc(imageSrc);\r\n  }, [webcamRef]);\r\n\r\n  const retake = () => {\r\n    setImgSrc(null);\r\n    imageTaken = false;\r\n  };\r\n\r\n  const saveImage = () => {\r\n    if (imageTaken == true){\r\n      while (imageTaken == true) {\r\n        retake;\r\n      }\r\n    }\r\n    const imageSrc = webcamRef.current.getScreenshot();\r\n    const blob = dataURItoBlob(imageSrc);\r\n    saveAs(blob, \"my-image.jpg\");\r\n  };\r\n\r\n  // Convert data URI to binary array\r\n  function dataURItoBlob(dataURI) {\r\n    // Split the data URI into parts\r\n    let parts = dataURI.split(\",\");\r\n    // Get the content type (image/jpeg)\r\n    let type = parts[0].split(\":\")[1].split(\";\")[0];\r\n    // Decode the base64 data\r\n    let data = atob(parts[1]);\r\n    // Create a binary array\r\n    let array = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n      array.push(data.charCodeAt(i));\r\n    }\r\n    // Return a Blob object\r\n    return new Blob([new Uint8Array(array)], { type: type });\r\n  }\r\n\r\n  // Function for sending photo\r\n  async function sendImage(imageSrc) {\r\n    const runFunction = false;\r\n    if (runFunction === true) {\r\n      try {\r\n\r\n        // get the image file as a blob\r\n        const responses = await fetch(imageSrc);\r\n        const blob = await responses.blob();\r\n\r\n        // create a FormData object and append the blob\r\n        const formData = new FormData();\r\n        formData.append(\"image\", blob, \"image.jpg\");\r\n\r\n        // send the request with the FormData as the body\r\n        const response = await fetch(\"http://sam141.brighton.domains/cloudvisionapi\", {\r\n          method: \"POST\",\r\n          body: formData,\r\n        })\r\n        // handle the response\r\n        if (response.ok) {\r\n          console.log(\"Image sent successfully\");\r\n          console.log(response);\r\n        } else {\r\n          console.error(\"Error sending image - response as follows:\");\r\n          console.log(response);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.log(\"Error when sending image - error as follows:\");\r\n        console.log(error);\r\n      };\r\n    } else {\r\n      console.log('Not currently sending responses');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {imgSrc ? (\r\n        <img src={imgSrc} alt=\"webcam\" />\r\n      ) : (\r\n        <Webcam\r\n          //height={960}\r\n          //width={540}\r\n          ref={webcamRef}\r\n          screenshotFormat=\"image/jpeg\"\r\n          screenshotQuality={0.8}\r\n        />\r\n      )}\r\n      <div className=\"btn-container\">\r\n        <button onClick={saveImage}>Save photo</button>\r\n        {imgSrc ? (\r\n          <>\r\n            <button onClick={retake}>Retake photo</button>\r\n          </>\r\n        ) : (\r\n          <button onClick={capture}>Capture photo</button>\r\n        )}\r\n        <button onClick={sendImage}>Send photo</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CustomWebcam;\r\n"],"mappings":";;AAAA;AACA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACrD,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAChC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5C,IAAIa,UAAU,GAAG,KAAK;EACtB;EACA,MAAMC,OAAO,GAAGb,WAAW,CAAC,MAAM;IAChC,MAAMc,QAAQ,GAAGL,SAAS,CAACM,OAAO,CAACC,aAAa,CAAC,CAAC;IAClDL,SAAS,CAACG,QAAQ,CAAC;EACrB,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAEf,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBN,SAAS,CAAC,IAAI,CAAC;IACfC,UAAU,GAAG,KAAK;EACpB,CAAC;EAED,MAAMM,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIN,UAAU,IAAI,IAAI,EAAC;MACrB,OAAOA,UAAU,IAAI,IAAI,EAAE;QACzBK,MAAM;MACR;IACF;IACA,MAAMH,QAAQ,GAAGL,SAAS,CAACM,OAAO,CAACC,aAAa,CAAC,CAAC;IAClD,MAAMG,IAAI,GAAGC,aAAa,CAACN,QAAQ,CAAC;IACpCZ,MAAM,CAACiB,IAAI,EAAE,cAAc,CAAC;EAC9B,CAAC;;EAED;EACA,SAASC,aAAaA,CAACC,OAAO,EAAE;IAC9B;IACA,IAAIC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;IAC9B;IACA,IAAIC,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/C;IACA,IAAIE,IAAI,GAAGC,IAAI,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;IACzB;IACA,IAAIK,KAAK,GAAG,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACpCD,KAAK,CAACG,IAAI,CAACL,IAAI,CAACM,UAAU,CAACH,CAAC,CAAC,CAAC;IAChC;IACA;IACA,OAAO,IAAII,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACN,KAAK,CAAC,CAAC,EAAE;MAAEH,IAAI,EAAEA;IAAK,CAAC,CAAC;EAC1D;;EAEA;EACA,eAAeU,SAASA,CAACpB,QAAQ,EAAE;IACjC,MAAMqB,WAAW,GAAG,KAAK;IACzB,IAAIA,WAAW,KAAK,IAAI,EAAE;MACxB,IAAI;QAEF;QACA,MAAMC,SAAS,GAAG,MAAMC,KAAK,CAACvB,QAAQ,CAAC;QACvC,MAAMK,IAAI,GAAG,MAAMiB,SAAS,CAACjB,IAAI,CAAC,CAAC;;QAEnC;QACA,MAAMmB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAErB,IAAI,EAAE,WAAW,CAAC;;QAE3C;QACA,MAAMsB,QAAQ,GAAG,MAAMJ,KAAK,CAAC,+CAA+C,EAAE;UAC5EK,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEL;QACR,CAAC,CAAC;QACF;QACA,IAAIG,QAAQ,CAACG,EAAE,EAAE;UACfC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;UACtCD,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;QACvB,CAAC,MAAM;UACLI,OAAO,CAACE,KAAK,CAAC,4CAA4C,CAAC;UAC3DF,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;QACvB;MAEF,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdF,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;QAC3DD,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MACpB;MAAC;IACH,CAAC,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAChD;EACF;EAAC;EAED,oBACE1C,OAAA;IAAK4C,SAAS,EAAC,WAAW;IAAAC,QAAA,GACvBvC,MAAM,gBACLN,OAAA;MAAK8C,GAAG,EAAExC,MAAO;MAACyC,GAAG,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEjCnD,OAAA,CAACH;IACC;IACA;IAAA;MACAuD,GAAG,EAAE/C,SAAU;MACfgD,gBAAgB,EAAC,YAAY;MAC7BC,iBAAiB,EAAE;IAAI;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,eACDnD,OAAA;MAAK4C,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B7C,OAAA;QAAQuD,OAAO,EAAEzC,SAAU;QAAA+B,QAAA,EAAC;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC9C7C,MAAM,gBACLN,OAAA,CAAAE,SAAA;QAAA2C,QAAA,eACE7C,OAAA;UAAQuD,OAAO,EAAE1C,MAAO;UAAAgC,QAAA,EAAC;QAAY;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC,gBAC9C,CAAC,gBAEHnD,OAAA;QAAQuD,OAAO,EAAE9C,OAAQ;QAAAoC,QAAA,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAChD,eACDnD,OAAA;QAAQuD,OAAO,EAAEzB,SAAU;QAAAe,QAAA,EAAC;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/C,EAAA,CA1GID,YAAY;AAAAqD,EAAA,GAAZrD,YAAY;AA2GlB,eAAeA,YAAY;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}