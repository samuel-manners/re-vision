{"ast":null,"code":"import { useMemo } from 'react';\nimport { VisionCameraProxy } from '../FrameProcessorPlugins';\n\n/**\n * Create a new Frame Processor function which you can pass to the `<Camera>`.\n * (See [\"Frame Processors\"](https://react-native-vision-camera.com/docs/guides/frame-processors))\n *\n * Make sure to add the `'worklet'` directive to the top of the Frame Processor function, otherwise it will not get compiled into a worklet.\n *\n * Also make sure to memoize the returned object, so that the Camera doesn't reset the Frame Processor Context each time.\n */\nexport function createFrameProcessor(frameProcessor, type) {\n  return {\n    frameProcessor: frame => {\n      'worklet';\n\n      // Increment ref-count by one\n      const internal = frame;\n      internal.incrementRefCount();\n      try {\n        // Call sync frame processor\n        frameProcessor(frame);\n      } catch (e) {\n        // Re-throw error on JS Thread\n        VisionCameraProxy.throwJSError(e);\n      } finally {\n        // Potentially delete Frame if we were the last ref (no runAsync)\n        internal.decrementRefCount();\n      }\n    },\n    type: type\n  };\n}\n\n/**\n * Returns a memoized Frame Processor function wich you can pass to the `<Camera>`.\n * (See [\"Frame Processors\"](https://react-native-vision-camera.com/docs/guides/frame-processors))\n *\n * Make sure to add the `'worklet'` directive to the top of the Frame Processor function, otherwise it will not get compiled into a worklet.\n *\n * @param frameProcessor The Frame Processor\n * @param dependencies The React dependencies which will be copied into the VisionCamera JS-Runtime.\n * @returns The memoized Frame Processor.\n * @example\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   const faces = scanFaces(frame)\n *   console.log(`Faces: ${faces}`)\n * }, [])\n * ```\n */\nexport function useFrameProcessor(frameProcessor, dependencies) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => createFrameProcessor(frameProcessor, 'frame-processor'), dependencies);\n}","map":{"version":3,"names":["useMemo","VisionCameraProxy","createFrameProcessor","frameProcessor","type","frame","internal","incrementRefCount","e","throwJSError","decrementRefCount","useFrameProcessor","dependencies"],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\hooks\\useFrameProcessor.ts"],"sourcesContent":["import { DependencyList, useMemo } from 'react'\nimport type { Frame, FrameInternal } from '../Frame'\nimport { FrameProcessor } from '../CameraProps'\nimport { VisionCameraProxy } from '../FrameProcessorPlugins'\n\n/**\n * Create a new Frame Processor function which you can pass to the `<Camera>`.\n * (See [\"Frame Processors\"](https://react-native-vision-camera.com/docs/guides/frame-processors))\n *\n * Make sure to add the `'worklet'` directive to the top of the Frame Processor function, otherwise it will not get compiled into a worklet.\n *\n * Also make sure to memoize the returned object, so that the Camera doesn't reset the Frame Processor Context each time.\n */\nexport function createFrameProcessor(frameProcessor: FrameProcessor['frameProcessor'], type: FrameProcessor['type']): FrameProcessor {\n  return {\n    frameProcessor: (frame: Frame) => {\n      'worklet'\n      // Increment ref-count by one\n      const internal = frame as FrameInternal\n      internal.incrementRefCount()\n      try {\n        // Call sync frame processor\n        frameProcessor(frame)\n      } catch (e) {\n        // Re-throw error on JS Thread\n        VisionCameraProxy.throwJSError(e)\n      } finally {\n        // Potentially delete Frame if we were the last ref (no runAsync)\n        internal.decrementRefCount()\n      }\n    },\n    type: type,\n  }\n}\n\n/**\n * Returns a memoized Frame Processor function wich you can pass to the `<Camera>`.\n * (See [\"Frame Processors\"](https://react-native-vision-camera.com/docs/guides/frame-processors))\n *\n * Make sure to add the `'worklet'` directive to the top of the Frame Processor function, otherwise it will not get compiled into a worklet.\n *\n * @param frameProcessor The Frame Processor\n * @param dependencies The React dependencies which will be copied into the VisionCamera JS-Runtime.\n * @returns The memoized Frame Processor.\n * @example\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   const faces = scanFaces(frame)\n *   console.log(`Faces: ${faces}`)\n * }, [])\n * ```\n */\nexport function useFrameProcessor(frameProcessor: (frame: Frame) => void, dependencies: DependencyList): FrameProcessor {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => createFrameProcessor(frameProcessor, 'frame-processor'), dependencies)\n}\n"],"mappings":"AAAA,SAAyBA,OAAO,QAAQ,OAAO;AAG/C,SAASC,iBAAiB,QAAQ,0BAA0B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,cAAgD,EAAEC,IAA4B,EAAkB;EACnI,OAAO;IACLD,cAAc,EAAGE,KAAY,IAAK;MAChC,SAAS;;MACT;MACA,MAAMC,QAAQ,GAAGD,KAAsB;MACvCC,QAAQ,CAACC,iBAAiB,CAAC,CAAC;MAC5B,IAAI;QACF;QACAJ,cAAc,CAACE,KAAK,CAAC;MACvB,CAAC,CAAC,OAAOG,CAAC,EAAE;QACV;QACAP,iBAAiB,CAACQ,YAAY,CAACD,CAAC,CAAC;MACnC,CAAC,SAAS;QACR;QACAF,QAAQ,CAACI,iBAAiB,CAAC,CAAC;MAC9B;IACF,CAAC;IACDN,IAAI,EAAEA;EACR,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,iBAAiBA,CAACR,cAAsC,EAAES,YAA4B,EAAkB;EACtH;EACA,OAAOZ,OAAO,CAAC,MAAME,oBAAoB,CAACC,cAAc,EAAE,iBAAiB,CAAC,EAAES,YAAY,CAAC;AAC7F"},"metadata":{},"sourceType":"module","externalDependencies":[]}