{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\Frame.ts"],"sourcesContent":["/**\n * A single frame, as seen by the camera.\n */\nexport interface Frame {\n  /**\n   * Whether the underlying buffer is still valid or not. The buffer will be released after the frame processor returns, or `close()` is called.\n   */\n  isValid: boolean;\n  /**\n   * Returns the width of the frame, in pixels.\n   */\n  width: number;\n  /**\n   * Returns the height of the frame, in pixels.\n   */\n  height: number;\n  /**\n   * Returns the amount of bytes per row.\n   */\n  bytesPerRow: number;\n  /**\n   * Returns the number of planes this frame contains.\n   */\n  planesCount: number;\n\n  /**\n   * Returns a string representation of the frame.\n   * @example\n   * ```ts\n   * console.log(frame.toString()) // -> \"3840 x 2160 Frame\"\n   * ```\n   */\n  toString(): string;\n  /**\n   * Closes and disposes the Frame.\n   * Only close frames that you have created yourself, e.g. by copying the frame you receive in a frame processor.\n   *\n   * @example\n   * ```ts\n   * const frameProcessor = useFrameProcessor((frame) => {\n   *   const smallerCopy = resize(frame, 480, 270)\n   *   // run AI ...\n   *   smallerCopy.close()\n   *   // don't close `frame`!\n   * })\n   * ```\n   */\n  close(): void;\n}\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}