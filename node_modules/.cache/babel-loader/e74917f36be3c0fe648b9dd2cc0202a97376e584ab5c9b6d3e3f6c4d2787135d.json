{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samue\\\\OneDrive\\\\Documents\\\\University\\\\Year 3\\\\Computing Project\\\\Code\\\\RevisionWebApp\\\\re-vision\\\\src\\\\components\\\\main\\\\components\\\\Camera.js\",\n  _s = $RefreshSig$();\n// import useRef, useState, useCallback, useEffect\nimport { useRef, useState, useCallback, useEffect } from \"react\";\n// import Webcam component\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomWebcam = () => {\n  _s();\n  const webcamRef = useRef(null); // create a webcam reference\n  const [imgSrc, setImgSrc] = useState(null); // initialize it\n\n  // Captures Photo\n  const capture = useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n  }, [webcamRef]);\n  const retake = () => {\n    setImgSrc(null);\n  };\n\n  /*-----------------------------------------------------------*/\n  //New send photo function\n  // This function will take the data of a jpg image and send it to an api\n  // It will print the response from the api to the console\n  function sendPhotos(data) {\n    // Create a new FormData object\n    let formData = new FormData();\n\n    // Append the data to the form data with the name \"photo\"\n    formData.append(\"photo\", data);\n\n    // Create a new XMLHttpRequest object for the api request\n    let xhr = new XMLHttpRequest();\n\n    // Specify the URL of the api endpoint\n    let api = \"https://sam141.brighton.domains.com/cloudvisionapi\";\n\n    // Open a POST request to the api\n    xhr.open(\"POST\", api);\n\n    // Define what to do when the api request is successful\n    xhr.onload = function () {\n      // Check if the status code is 200 (OK)\n      if (xhr.status === 200) {\n        // Get the response text from the api\n        let response = xhr.responseText;\n\n        // Print the response to the console\n        console.log(response);\n      } else {\n        // Print the status code and the error message to the console\n        console.error(xhr.status + \": \" + xhr.statusText);\n      }\n    };\n\n    // Define what to do when the api request fails\n    xhr.onerror = function () {\n      // Print the error message to the console\n      console.error(\"Network error\");\n    };\n\n    // Send the form data to the api\n    xhr.send(formData);\n  }\n\n  /*-----------------------------------------------------------*/\n  // Function for sending photo\n  const sendImage = async () => {\n    try {\n      // convert the image to a base64 string\n      const data = imgSrc.replace(/^data:image\\/jpeg;base64,/, \"\");\n      const response = await fetch(\"http://sam141.brighton.domains/cloudvisionapi\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          imgSrc\n        })\n      });\n      // handle the response\n      if (response.ok) {\n        console.log(\"Image sent successfully\");\n        console.log(response);\n      } else {\n        console.error(\"Error sending image\");\n        console.log(response);\n      }\n    } catch (error) {\n      console.log(\"Error when sending image - error as follows:\");\n      console.log(error);\n    }\n    ;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [imgSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imgSrc,\n      alt: \"webcam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Webcam\n    //height={960}\n    //width={540}\n    , {\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      screenshotQuality: 0.8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"BrowsePhotos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), imgSrc ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retake,\n          children: \"Retake photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendPhotos(imgSrc),\n          children: \"Send photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: capture,\n        children: \"Capture photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomWebcam, \"ESwUrLq+HE9liXlylGlqUDf3hvQ=\");\n_c = CustomWebcam;\nexport default CustomWebcam;\nvar _c;\n$RefreshReg$(_c, \"CustomWebcam\");","map":{"version":3,"names":["useRef","useState","useCallback","useEffect","Webcam","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomWebcam","_s","webcamRef","imgSrc","setImgSrc","capture","imageSrc","current","getScreenshot","retake","sendPhotos","data","formData","FormData","append","xhr","XMLHttpRequest","api","open","onload","status","response","responseText","console","log","error","statusText","onerror","send","sendImage","replace","fetch","method","headers","body","JSON","stringify","ok","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","screenshotFormat","screenshotQuality","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Samue/OneDrive/Documents/University/Year 3/Computing Project/Code/RevisionWebApp/re-vision/src/components/main/components/Camera.js"],"sourcesContent":["// import useRef, useState, useCallback, useEffect\r\nimport { useRef, useState, useCallback, useEffect } from \"react\";\r\n// import Webcam component\r\nimport Webcam from \"react-webcam\";\r\n\r\nconst CustomWebcam = () => {\r\n  const webcamRef = useRef(null); // create a webcam reference\r\n  const [imgSrc, setImgSrc] = useState(null); // initialize it\r\n\r\n  // Captures Photo\r\n  const capture = useCallback(() => {\r\n    const imageSrc = webcamRef.current.getScreenshot();\r\n    setImgSrc(imageSrc);\r\n  }, [webcamRef]);\r\n\r\n  const retake = () => {\r\n    setImgSrc(null);\r\n  };\r\n\r\n  /*-----------------------------------------------------------*/\r\n  //New send photo function\r\n  // This function will take the data of a jpg image and send it to an api\r\n// It will print the response from the api to the console\r\nfunction sendPhotos(data) {\r\n  // Create a new FormData object\r\n  let formData = new FormData();\r\n\r\n  // Append the data to the form data with the name \"photo\"\r\n  formData.append(\"photo\", data);\r\n\r\n  // Create a new XMLHttpRequest object for the api request\r\n  let xhr = new XMLHttpRequest();\r\n\r\n  // Specify the URL of the api endpoint\r\n  let api = \"https://sam141.brighton.domains.com/cloudvisionapi\";\r\n\r\n  // Open a POST request to the api\r\n  xhr.open(\"POST\", api);\r\n\r\n  // Define what to do when the api request is successful\r\n  xhr.onload = function () {\r\n    // Check if the status code is 200 (OK)\r\n    if (xhr.status === 200) {\r\n      // Get the response text from the api\r\n      let response = xhr.responseText;\r\n\r\n      // Print the response to the console\r\n      console.log(response);\r\n    } else {\r\n      // Print the status code and the error message to the console\r\n      console.error(xhr.status + \": \" + xhr.statusText);\r\n    }\r\n  };\r\n\r\n  // Define what to do when the api request fails\r\n  xhr.onerror = function () {\r\n    // Print the error message to the console\r\n    console.error(\"Network error\");\r\n  };\r\n\r\n  // Send the form data to the api\r\n  xhr.send(formData);\r\n}\r\n\r\n\r\n  /*-----------------------------------------------------------*/\r\n  // Function for sending photo\r\n  const sendImage = async () => {\r\n    try {\r\n\r\n      // convert the image to a base64 string\r\n      const data = imgSrc.replace(/^data:image\\/jpeg;base64,/, \"\");\r\n      const response = await fetch(\"http://sam141.brighton.domains/cloudvisionapi\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ imgSrc }),\r\n      })\r\n      // handle the response\r\n      if (response.ok) {\r\n        console.log(\"Image sent successfully\");\r\n        console.log(response);\r\n      } else {\r\n        console.error(\"Error sending image\");\r\n        console.log(response);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error when sending image - error as follows:\");\r\n      console.log(error);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {imgSrc ? (\r\n        <img src={imgSrc} alt=\"webcam\" />\r\n      ) : (\r\n        <Webcam\r\n          //height={960}\r\n          //width={540}\r\n          ref={webcamRef}\r\n          screenshotFormat=\"image/jpeg\"\r\n          screenshotQuality={0.8}\r\n        />\r\n      )}\r\n      <div className=\"btn-container\">\r\n        <button>BrowsePhotos</button>\r\n        {imgSrc ? (\r\n          <>\r\n            <button onClick={retake}>Retake photo</button>\r\n            <button onClick={sendPhotos(imgSrc)}>Send photo</button>\r\n          </>\r\n        ) : (\r\n          <button onClick={capture}>Capture photo</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CustomWebcam;\r\n"],"mappings":";;AAAA;AACA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAChE;AACA,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAChC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAMa,OAAO,GAAGZ,WAAW,CAAC,MAAM;IAChC,MAAMa,QAAQ,GAAGJ,SAAS,CAACK,OAAO,CAACC,aAAa,CAAC,CAAC;IAClDJ,SAAS,CAACE,QAAQ,CAAC;EACrB,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EAEf,MAAMO,MAAM,GAAGA,CAAA,KAAM;IACnBL,SAAS,CAAC,IAAI,CAAC;EACjB,CAAC;;EAED;EACA;EACA;EACF;EACA,SAASM,UAAUA,CAACC,IAAI,EAAE;IACxB;IACA,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;IAE7B;IACAD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;;IAE9B;IACA,IAAII,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;;IAE9B;IACA,IAAIC,GAAG,GAAG,oDAAoD;;IAE9D;IACAF,GAAG,CAACG,IAAI,CAAC,MAAM,EAAED,GAAG,CAAC;;IAErB;IACAF,GAAG,CAACI,MAAM,GAAG,YAAY;MACvB;MACA,IAAIJ,GAAG,CAACK,MAAM,KAAK,GAAG,EAAE;QACtB;QACA,IAAIC,QAAQ,GAAGN,GAAG,CAACO,YAAY;;QAE/B;QACAC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACvB,CAAC,MAAM;QACL;QACAE,OAAO,CAACE,KAAK,CAACV,GAAG,CAACK,MAAM,GAAG,IAAI,GAAGL,GAAG,CAACW,UAAU,CAAC;MACnD;IACF,CAAC;;IAED;IACAX,GAAG,CAACY,OAAO,GAAG,YAAY;MACxB;MACAJ,OAAO,CAACE,KAAK,CAAC,eAAe,CAAC;IAChC,CAAC;;IAED;IACAV,GAAG,CAACa,IAAI,CAAChB,QAAQ,CAAC;EACpB;;EAGE;EACA;EACA,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MAEF;MACA,MAAMlB,IAAI,GAAGR,MAAM,CAAC2B,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC;MAC5D,MAAMT,QAAQ,GAAG,MAAMU,KAAK,CAAC,+CAA+C,EAAE;QAC5EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEjC;QAAO,CAAC;MACjC,CAAC,CAAC;MACF;MACA,IAAIkB,QAAQ,CAACgB,EAAE,EAAE;QACfd,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtCD,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACvB,CAAC,MAAM;QACLE,OAAO,CAACE,KAAK,CAAC,qBAAqB,CAAC;QACpCF,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACvB;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3DD,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;IAAC;EACH,CAAC;EAED,oBACE5B,OAAA;IAAKyC,SAAS,EAAC,WAAW;IAAAC,QAAA,GACvBpC,MAAM,gBACLN,OAAA;MAAK2C,GAAG,EAAErC,MAAO;MAACsC,GAAG,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEjChD,OAAA,CAACF;IACC;IACA;IAAA;MACAmD,GAAG,EAAE5C,SAAU;MACf6C,gBAAgB,EAAC,YAAY;MAC7BC,iBAAiB,EAAE;IAAI;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,eACDhD,OAAA;MAAKyC,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B1C,OAAA;QAAA0C,QAAA,EAAQ;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC5B1C,MAAM,gBACLN,OAAA,CAAAE,SAAA;QAAAwC,QAAA,gBACE1C,OAAA;UAAQoD,OAAO,EAAExC,MAAO;UAAA8B,QAAA,EAAC;QAAY;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9ChD,OAAA;UAAQoD,OAAO,EAAEvC,UAAU,CAACP,MAAM,CAAE;UAAAoC,QAAA,EAAC;QAAU;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACxD,CAAC,gBAEHhD,OAAA;QAAQoD,OAAO,EAAE5C,OAAQ;QAAAkC,QAAA,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAChD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAlHID,YAAY;AAAAkD,EAAA,GAAZlD,YAAY;AAmHlB,eAAeA,YAAY;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}