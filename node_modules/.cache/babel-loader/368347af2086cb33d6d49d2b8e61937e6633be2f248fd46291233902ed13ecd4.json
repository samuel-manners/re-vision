{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { Camera } from '../Camera';\n/**\n * Returns whether the user has granted permission to use the Camera, or not.\n *\n * If the user doesn't grant Camera Permission, you cannot use the `<Camera>`.\n *\n * @example\n * ```tsx\n * const { hasPermission, requestPermission } = useCameraPermission()\n *\n * if (!hasPermission) {\n *   return <PermissionScreen onPress={requestPermission} />\n * } else {\n *   return <Camera ... />\n * }\n * ```\n */\nexport function useCameraPermission() {\n  const [hasPermission, setHasPermission] = useState(() => Camera.getCameraPermissionStatus() === 'granted');\n  const requestPermission = useCallback(async () => {\n    const result = await Camera.requestCameraPermission();\n    const hasPermissionNow = result === 'granted';\n    setHasPermission(hasPermissionNow);\n    return hasPermissionNow;\n  }, []);\n  return {\n    hasPermission,\n    requestPermission\n  };\n}\n\n/**\n * Returns whether the user has granted permission to use the Microphone, or not.\n *\n * If the user doesn't grant Audio Permission, you can use the `<Camera>` but you cannot\n * record videos with audio (the `audio={..}` prop).\n *\n * @example\n * ```tsx\n * const { hasPermission, requestPermission } = useMicrophonePermission()\n * const canRecordAudio = hasPermission\n *\n * return <Camera video={true} audio={canRecordAudio} />\n * ```\n */\nexport function useMicrophonePermission() {\n  const [hasPermission, setHasPermission] = useState(() => Camera.getMicrophonePermissionStatus() === 'granted');\n  const requestPermission = useCallback(async () => {\n    const result = await Camera.requestMicrophonePermission();\n    const hasPermissionNow = result === 'granted';\n    setHasPermission(hasPermissionNow);\n    return hasPermissionNow;\n  }, []);\n  return {\n    hasPermission,\n    requestPermission\n  };\n}","map":{"version":3,"names":["useCallback","useState","Camera","useCameraPermission","hasPermission","setHasPermission","getCameraPermissionStatus","requestPermission","result","requestCameraPermission","hasPermissionNow","useMicrophonePermission","getMicrophonePermissionStatus","requestMicrophonePermission"],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\hooks\\useCameraPermission.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\nimport { Camera } from '../Camera'\n\ninterface PermissionState {\n  /**\n   * Whether the specified permission has explicitly been granted.\n   * By default, this will be `false`. To request permission, call `requestPermission()`.\n   */\n  hasPermission: boolean\n  /**\n   * Requests the specified permission from the user.\n   * @returns Whether the specified permission has now been granted, or not.\n   */\n  requestPermission: () => Promise<boolean>\n}\n\n/**\n * Returns whether the user has granted permission to use the Camera, or not.\n *\n * If the user doesn't grant Camera Permission, you cannot use the `<Camera>`.\n *\n * @example\n * ```tsx\n * const { hasPermission, requestPermission } = useCameraPermission()\n *\n * if (!hasPermission) {\n *   return <PermissionScreen onPress={requestPermission} />\n * } else {\n *   return <Camera ... />\n * }\n * ```\n */\nexport function useCameraPermission(): PermissionState {\n  const [hasPermission, setHasPermission] = useState(() => Camera.getCameraPermissionStatus() === 'granted')\n\n  const requestPermission = useCallback(async () => {\n    const result = await Camera.requestCameraPermission()\n    const hasPermissionNow = result === 'granted'\n    setHasPermission(hasPermissionNow)\n    return hasPermissionNow\n  }, [])\n\n  return {\n    hasPermission,\n    requestPermission,\n  }\n}\n\n/**\n * Returns whether the user has granted permission to use the Microphone, or not.\n *\n * If the user doesn't grant Audio Permission, you can use the `<Camera>` but you cannot\n * record videos with audio (the `audio={..}` prop).\n *\n * @example\n * ```tsx\n * const { hasPermission, requestPermission } = useMicrophonePermission()\n * const canRecordAudio = hasPermission\n *\n * return <Camera video={true} audio={canRecordAudio} />\n * ```\n */\nexport function useMicrophonePermission(): PermissionState {\n  const [hasPermission, setHasPermission] = useState(() => Camera.getMicrophonePermissionStatus() === 'granted')\n\n  const requestPermission = useCallback(async () => {\n    const result = await Camera.requestMicrophonePermission()\n    const hasPermissionNow = result === 'granted'\n    setHasPermission(hasPermissionNow)\n    return hasPermissionNow\n  }, [])\n\n  return {\n    hasPermission,\n    requestPermission,\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SAASC,MAAM,QAAQ,WAAW;AAelC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAAA,EAAoB;EACrD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,MAAMC,MAAM,CAACI,yBAAyB,CAAC,CAAC,KAAK,SAAS,CAAC;EAE1G,MAAMC,iBAAiB,GAAGP,WAAW,CAAC,YAAY;IAChD,MAAMQ,MAAM,GAAG,MAAMN,MAAM,CAACO,uBAAuB,CAAC,CAAC;IACrD,MAAMC,gBAAgB,GAAGF,MAAM,KAAK,SAAS;IAC7CH,gBAAgB,CAACK,gBAAgB,CAAC;IAClC,OAAOA,gBAAgB;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLN,aAAa;IACbG;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,uBAAuBA,CAAA,EAAoB;EACzD,MAAM,CAACP,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,MAAMC,MAAM,CAACU,6BAA6B,CAAC,CAAC,KAAK,SAAS,CAAC;EAE9G,MAAML,iBAAiB,GAAGP,WAAW,CAAC,YAAY;IAChD,MAAMQ,MAAM,GAAG,MAAMN,MAAM,CAACW,2BAA2B,CAAC,CAAC;IACzD,MAAMH,gBAAgB,GAAGF,MAAM,KAAK,SAAS;IAC7CH,gBAAgB,CAACK,gBAAgB,CAAC;IAClC,OAAOA,gBAAgB;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLN,aAAa;IACbG;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}