{"ast":null,"code":"import { isDomElement } from \"./isDomElement.js\";\n\n/**\n * Return the container. If it's a string, it is considered a\n * css selector and retrieves the first matching element. Otherwise\n * test if it validates that it's a correct DOMElement.\n *\n * @param {string|HTMLElement} selectorOrHTMLElement CSS Selector or container node.\n * @return {HTMLElement} Container node\n * @throws Error when the type is not correct\n */\nexport function getContainerNode(selectorOrHTMLElement) {\n  var isSelectorString = typeof selectorOrHTMLElement === 'string';\n  var domElement = isSelectorString ? document.querySelector(selectorOrHTMLElement) : selectorOrHTMLElement;\n  if (!isDomElement(domElement)) {\n    var errorMessage = 'Container must be `string` or `HTMLElement`.';\n    if (isSelectorString) {\n      errorMessage += \" Unable to find \".concat(selectorOrHTMLElement);\n    }\n    throw new Error(errorMessage);\n  }\n  return domElement;\n}","map":{"version":3,"names":["isDomElement","getContainerNode","selectorOrHTMLElement","isSelectorString","domElement","document","querySelector","errorMessage","concat","Error"],"sources":["C:/Users/Samue/OneDrive/Documents/University/Year 3/Computing Project/Code/RevisionWebApp/re-vision/node_modules/instantsearch.js/es/lib/utils/getContainerNode.js"],"sourcesContent":["import { isDomElement } from \"./isDomElement.js\";\n\n/**\n * Return the container. If it's a string, it is considered a\n * css selector and retrieves the first matching element. Otherwise\n * test if it validates that it's a correct DOMElement.\n *\n * @param {string|HTMLElement} selectorOrHTMLElement CSS Selector or container node.\n * @return {HTMLElement} Container node\n * @throws Error when the type is not correct\n */\nexport function getContainerNode(selectorOrHTMLElement) {\n  var isSelectorString = typeof selectorOrHTMLElement === 'string';\n  var domElement = isSelectorString ? document.querySelector(selectorOrHTMLElement) : selectorOrHTMLElement;\n  if (!isDomElement(domElement)) {\n    var errorMessage = 'Container must be `string` or `HTMLElement`.';\n    if (isSelectorString) {\n      errorMessage += \" Unable to find \".concat(selectorOrHTMLElement);\n    }\n    throw new Error(errorMessage);\n  }\n  return domElement;\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,qBAAqB,EAAE;EACtD,IAAIC,gBAAgB,GAAG,OAAOD,qBAAqB,KAAK,QAAQ;EAChE,IAAIE,UAAU,GAAGD,gBAAgB,GAAGE,QAAQ,CAACC,aAAa,CAACJ,qBAAqB,CAAC,GAAGA,qBAAqB;EACzG,IAAI,CAACF,YAAY,CAACI,UAAU,CAAC,EAAE;IAC7B,IAAIG,YAAY,GAAG,8CAA8C;IACjE,IAAIJ,gBAAgB,EAAE;MACpBI,YAAY,IAAI,kBAAkB,CAACC,MAAM,CAACN,qBAAqB,CAAC;IAClE;IACA,MAAM,IAAIO,KAAK,CAACF,YAAY,CAAC;EAC/B;EACA,OAAOH,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}