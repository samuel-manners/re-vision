{"ast":null,"code":"/**\n * Get the best matching Camera device that best satisfies your requirements using a sorting filter, or `undefined` if {@linkcode devices} does not contain any devices.\n * @param position The position of the Camera device relative to the phone.\n * @param filter The filter you want to use. The Camera device that matches your filter the closest will be returned\n * @returns The Camera device that matches your filter the closest, or `undefined` if no such Camera Device exists on the given {@linkcode position}.\n * @example\n * ```ts\n * const devices = Camera.getAvailableCameraDevices()\n * const device = getCameraDevice(devices, 'back', {\n *    physicalDevices: ['wide-angle-camera']\n * })\n * ```\n */\nexport function getCameraDevice(devices, position, filter = {}) {\n  const filtered = devices.filter(d => d.position === position);\n  let bestDevice = filtered[0];\n  if (bestDevice == null) return undefined;\n\n  // Compare each device using a point scoring system\n  for (const device of filtered) {\n    let leftPoints = 0;\n    let rightPoints = 0;\n\n    // prefer higher hardware-level\n    if (bestDevice.hardwareLevel === 'full') leftPoints += 4;\n    if (device.hardwareLevel === 'full') rightPoints += 4;\n    if (filter.physicalDevices != null) {\n      // user did pass a physical device filter, two possible scenarios:\n      // 1. user wants all cameras ([ultra-wide, wide, tele]) to zoom. prefer those devices that have all 3 cameras.\n      // 2. user wants only one ([wide]) for faster performance. prefer those devices that only have one camera, if they have more, we rank them lower.\n      for (const d of bestDevice.physicalDevices) {\n        if (filter.physicalDevices.includes(d)) leftPoints += 1;else leftPoints -= 1;\n      }\n      for (const d of device.physicalDevices) {\n        if (filter.physicalDevices.includes(d)) rightPoints += 1;else rightPoints -= 1;\n      }\n    } else {\n      // user did not pass a physical device filter. prefer wide-angle-camera as a default\n      if (bestDevice.physicalDevices.includes('wide-angle-camera')) leftPoints += 2;\n      if (device.physicalDevices.includes('wide-angle-camera')) rightPoints += 2;\n      // if we have more than one device, we rank it lower. we only want a simple camera\n      if (bestDevice.physicalDevices.length > device.physicalDevices.length) leftPoints -= 1;\n      if (device.physicalDevices.length > bestDevice.physicalDevices.length) rightPoints -= 1;\n    }\n    if (rightPoints > leftPoints) bestDevice = device;\n  }\n  return bestDevice;\n}","map":{"version":3,"names":["getCameraDevice","devices","position","filter","filtered","d","bestDevice","undefined","device","leftPoints","rightPoints","hardwareLevel","physicalDevices","includes","length"],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\devices\\getCameraDevice.ts"],"sourcesContent":["import { CameraDevice, CameraPosition, PhysicalCameraDeviceType } from '../CameraDevice'\n\nexport interface DeviceFilter {\n  /**\n   * The desired physical devices your camera device should have.\n   *\n   * Many modern phones have multiple Camera devices on one side and can combine those physical camera devices to one logical camera device.\n   * For example, the iPhone 11 has two physical camera devices, the `ultra-wide-angle-camera` (\"fish-eye\") and the normal `wide-angle-camera`. You can either use one of those devices individually, or use a combined logical camera device which can smoothly switch over between the two physical cameras depending on the current `zoom` level.\n   * When the user is at 0.5x-1x zoom, the `ultra-wide-angle-camera` can be used to offer a fish-eye zoom-out effect, and anything above 1x will smoothly switch over to the `wide-angle-camera`.\n   *\n   * **Note:** Devices with less phyiscal devices (`['wide-angle-camera']`) are usually faster to start-up than more complex\n   * devices (`['ultra-wide-angle-camera', 'wide-angle-camera', 'telephoto-camera']`), but don't offer zoom switch-over capabilities.\n   *\n   * @example\n   * ```ts\n   * // This device is simpler, so it starts up faster.\n   * getCameraDevice({ physicalDevices: ['wide-angle-camera'] })\n   * // This device is more complex, so it starts up slower, but you can switch between devices on 0.5x, 1x and 2x zoom.\n   * getCameraDevice({ physicalDevices: ['ultra-wide-angle-camera', 'wide-angle-camera', 'telephoto-camera'] })\n   * ```\n   */\n  physicalDevices?: PhysicalCameraDeviceType[]\n}\n\n/**\n * Get the best matching Camera device that best satisfies your requirements using a sorting filter, or `undefined` if {@linkcode devices} does not contain any devices.\n * @param position The position of the Camera device relative to the phone.\n * @param filter The filter you want to use. The Camera device that matches your filter the closest will be returned\n * @returns The Camera device that matches your filter the closest, or `undefined` if no such Camera Device exists on the given {@linkcode position}.\n * @example\n * ```ts\n * const devices = Camera.getAvailableCameraDevices()\n * const device = getCameraDevice(devices, 'back', {\n *    physicalDevices: ['wide-angle-camera']\n * })\n * ```\n */\nexport function getCameraDevice(devices: CameraDevice[], position: CameraPosition, filter: DeviceFilter = {}): CameraDevice | undefined {\n  const filtered = devices.filter((d) => d.position === position)\n\n  let bestDevice = filtered[0]\n  if (bestDevice == null) return undefined\n\n  // Compare each device using a point scoring system\n  for (const device of filtered) {\n    let leftPoints = 0\n    let rightPoints = 0\n\n    // prefer higher hardware-level\n    if (bestDevice.hardwareLevel === 'full') leftPoints += 4\n    if (device.hardwareLevel === 'full') rightPoints += 4\n\n    if (filter.physicalDevices != null) {\n      // user did pass a physical device filter, two possible scenarios:\n      // 1. user wants all cameras ([ultra-wide, wide, tele]) to zoom. prefer those devices that have all 3 cameras.\n      // 2. user wants only one ([wide]) for faster performance. prefer those devices that only have one camera, if they have more, we rank them lower.\n      for (const d of bestDevice.physicalDevices) {\n        if (filter.physicalDevices.includes(d)) leftPoints += 1\n        else leftPoints -= 1\n      }\n      for (const d of device.physicalDevices) {\n        if (filter.physicalDevices.includes(d)) rightPoints += 1\n        else rightPoints -= 1\n      }\n    } else {\n      // user did not pass a physical device filter. prefer wide-angle-camera as a default\n      if (bestDevice.physicalDevices.includes('wide-angle-camera')) leftPoints += 2\n      if (device.physicalDevices.includes('wide-angle-camera')) rightPoints += 2\n      // if we have more than one device, we rank it lower. we only want a simple camera\n      if (bestDevice.physicalDevices.length > device.physicalDevices.length) leftPoints -= 1\n      if (device.physicalDevices.length > bestDevice.physicalDevices.length) rightPoints -= 1\n    }\n\n    if (rightPoints > leftPoints) bestDevice = device\n  }\n\n  return bestDevice\n}\n"],"mappings":"AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,OAAuB,EAAEC,QAAwB,EAAEC,MAAoB,GAAG,CAAC,CAAC,EAA4B;EACtI,MAAMC,QAAQ,GAAGH,OAAO,CAACE,MAAM,CAAEE,CAAC,IAAKA,CAAC,CAACH,QAAQ,KAAKA,QAAQ,CAAC;EAE/D,IAAII,UAAU,GAAGF,QAAQ,CAAC,CAAC,CAAC;EAC5B,IAAIE,UAAU,IAAI,IAAI,EAAE,OAAOC,SAAS;;EAExC;EACA,KAAK,MAAMC,MAAM,IAAIJ,QAAQ,EAAE;IAC7B,IAAIK,UAAU,GAAG,CAAC;IAClB,IAAIC,WAAW,GAAG,CAAC;;IAEnB;IACA,IAAIJ,UAAU,CAACK,aAAa,KAAK,MAAM,EAAEF,UAAU,IAAI,CAAC;IACxD,IAAID,MAAM,CAACG,aAAa,KAAK,MAAM,EAAED,WAAW,IAAI,CAAC;IAErD,IAAIP,MAAM,CAACS,eAAe,IAAI,IAAI,EAAE;MAClC;MACA;MACA;MACA,KAAK,MAAMP,CAAC,IAAIC,UAAU,CAACM,eAAe,EAAE;QAC1C,IAAIT,MAAM,CAACS,eAAe,CAACC,QAAQ,CAACR,CAAC,CAAC,EAAEI,UAAU,IAAI,CAAC,MAClDA,UAAU,IAAI,CAAC;MACtB;MACA,KAAK,MAAMJ,CAAC,IAAIG,MAAM,CAACI,eAAe,EAAE;QACtC,IAAIT,MAAM,CAACS,eAAe,CAACC,QAAQ,CAACR,CAAC,CAAC,EAAEK,WAAW,IAAI,CAAC,MACnDA,WAAW,IAAI,CAAC;MACvB;IACF,CAAC,MAAM;MACL;MACA,IAAIJ,UAAU,CAACM,eAAe,CAACC,QAAQ,CAAC,mBAAmB,CAAC,EAAEJ,UAAU,IAAI,CAAC;MAC7E,IAAID,MAAM,CAACI,eAAe,CAACC,QAAQ,CAAC,mBAAmB,CAAC,EAAEH,WAAW,IAAI,CAAC;MAC1E;MACA,IAAIJ,UAAU,CAACM,eAAe,CAACE,MAAM,GAAGN,MAAM,CAACI,eAAe,CAACE,MAAM,EAAEL,UAAU,IAAI,CAAC;MACtF,IAAID,MAAM,CAACI,eAAe,CAACE,MAAM,GAAGR,UAAU,CAACM,eAAe,CAACE,MAAM,EAAEJ,WAAW,IAAI,CAAC;IACzF;IAEA,IAAIA,WAAW,GAAGD,UAAU,EAAEH,UAAU,GAAGE,MAAM;EACnD;EAEA,OAAOF,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}