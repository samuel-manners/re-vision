{"ast":null,"code":"import { useMemo } from 'react';\nimport { getCameraFormat } from '../devices/getCameraFormat';\n\n/**\n * Get the best matching Camera format for the given device that satisfies your requirements using a sorting filter. By default, formats are sorted by highest to lowest resolution.\n *\n * The {@linkcode filters | filters} are ranked by priority, from highest to lowest.\n * This means the first item you pass will have a higher priority than the second, and so on.\n *\n * @param device The Camera Device you're currently using\n * @param filter The filter you want to use. The format that matches your filter the closest will be returned\n * @returns The format that matches your filter the closest.\n * @example\n * ```ts\n * const device = useCameraDevice(...)\n * const format = useCameraFormat(device, [\n *   { videoResolution: { width: 3048, height: 2160 } },\n *   { fps: 60 }\n * ])\n * ```\n */\nexport function useCameraFormat(device, filters) {\n  const format = useMemo(() => {\n    if (device == null) return undefined;\n    return getCameraFormat(device, filters);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [device, JSON.stringify(filters)]);\n  return format;\n}","map":{"version":3,"names":["useMemo","getCameraFormat","useCameraFormat","device","filters","format","undefined","JSON","stringify"],"sources":["C:\\Users\\Samue\\OneDrive\\Documents\\University\\Year 3\\Computing Project\\Code\\RevisionWebApp\\re-vision\\node_modules\\react-native-vision-camera\\src\\hooks\\useCameraFormat.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { CameraDevice, CameraDeviceFormat } from '../CameraDevice'\nimport { FormatFilter, getCameraFormat } from '../devices/getCameraFormat'\n\n/**\n * Get the best matching Camera format for the given device that satisfies your requirements using a sorting filter. By default, formats are sorted by highest to lowest resolution.\n *\n * The {@linkcode filters | filters} are ranked by priority, from highest to lowest.\n * This means the first item you pass will have a higher priority than the second, and so on.\n *\n * @param device The Camera Device you're currently using\n * @param filter The filter you want to use. The format that matches your filter the closest will be returned\n * @returns The format that matches your filter the closest.\n * @example\n * ```ts\n * const device = useCameraDevice(...)\n * const format = useCameraFormat(device, [\n *   { videoResolution: { width: 3048, height: 2160 } },\n *   { fps: 60 }\n * ])\n * ```\n */\nexport function useCameraFormat(device: CameraDevice | undefined, filters: FormatFilter[]): CameraDeviceFormat | undefined {\n  const format = useMemo(() => {\n    if (device == null) return undefined\n    return getCameraFormat(device, filters)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [device, JSON.stringify(filters)])\n\n  return format\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAAuBC,eAAe,QAAQ,4BAA4B;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,MAAgC,EAAEC,OAAuB,EAAkC;EACzH,MAAMC,MAAM,GAAGL,OAAO,CAAC,MAAM;IAC3B,IAAIG,MAAM,IAAI,IAAI,EAAE,OAAOG,SAAS;IACpC,OAAOL,eAAe,CAACE,MAAM,EAAEC,OAAO,CAAC;IACvC;EACF,CAAC,EAAE,CAACD,MAAM,EAAEI,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC,CAAC;EAErC,OAAOC,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}